{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@angular/flex-layout/_private-utils';\nimport { filter, tap, map, debounceTime, switchMap, takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nfunction removeStyles(_document, platformId) {\n  return () => {\n    if (isPlatformBrowser(platformId)) {\n      const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n      // RegExp constructor should only be used if passing a variable to the constructor.\n      // When using static regular expression it is more performant to use reg exp literal.\n      // This is also needed to provide Safari 9 compatibility, please see\n      // https://stackoverflow.com/questions/37919802 for more discussion.\n      const classRegex = /\\bflex-layout-.+?\\b/g;\n      elements.forEach(el => {\n        el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ? el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n      });\n    }\n  };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nconst BROWSER_PROVIDER = {\n  provide: APP_BOOTSTRAP_LISTENER,\n  useFactory: removeStyles,\n  deps: [DOCUMENT, PLATFORM_ID],\n  multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {}\nCoreModule.ɵfac = function CoreModule_Factory(t) {\n  return new (t || CoreModule)();\n};\nCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CoreModule\n});\nCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [BROWSER_PROVIDER]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [BROWSER_PROVIDER]\n    }]\n  }], null, null);\n})();\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n  /**\n   * @param matches whether the mediaQuery is currently activated\n   * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n   * @param mqAlias e.g. gt-sm, md, gt-lg\n   * @param suffix e.g. GtSM, Md, GtLg\n   * @param priority the priority of activation for the given breakpoint\n   */\n  constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n    this.matches = matches;\n    this.mediaQuery = mediaQuery;\n    this.mqAlias = mqAlias;\n    this.suffix = suffix;\n    this.priority = priority;\n    this.property = '';\n  }\n  /** Create an exact copy of the MediaChange */\n  clone() {\n    return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n  constructor() {\n    this.stylesheet = new Map();\n  }\n  /**\n   * Add an individual style to an HTML element\n   */\n  addStyleToElement(element, style, value) {\n    const stylesheet = this.stylesheet.get(element);\n    if (stylesheet) {\n      stylesheet.set(style, value);\n    } else {\n      this.stylesheet.set(element, new Map([[style, value]]));\n    }\n  }\n  /**\n   * Clear the virtual stylesheet\n   */\n  clearStyles() {\n    this.stylesheet.clear();\n  }\n  /**\n   * Retrieve a given style for an HTML element\n   */\n  getStyleForElement(el, styleName) {\n    const styles = this.stylesheet.get(el);\n    let value = '';\n    if (styles) {\n      const style = styles.get(styleName);\n      if (typeof style === 'number' || typeof style === 'string') {\n        value = style + '';\n      }\n    }\n    return value;\n  }\n}\nStylesheetMap.ɵfac = function StylesheetMap_Factory(t) {\n  return new (t || StylesheetMap)();\n};\nStylesheetMap.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StylesheetMap,\n  factory: StylesheetMap.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StylesheetMap, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_CONFIG = {\n  addFlexToParent: true,\n  addOrientationBps: false,\n  disableDefaultBps: false,\n  disableVendorPrefixes: false,\n  serverLoaded: false,\n  useColumnBasisZero: true,\n  printWithBreakpoints: [],\n  mediaTriggerAutoRestore: true,\n  ssrObserveBreakpoints: []\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n  providedIn: 'root',\n  factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n  providedIn: 'root',\n  factory: () => false\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n  providedIn: 'root',\n  factory: () => null\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nfunction mergeAlias(dest, source) {\n  dest = dest ? dest.clone() : new MediaChange();\n  if (source) {\n    dest.mqAlias = source.alias;\n    dest.mediaQuery = source.mediaQuery;\n    dest.suffix = source.suffix;\n    dest.priority = source.priority;\n  }\n  return dest;\n}\n\n/** A class that encapsulates CSS style generation for common directives */\nclass StyleBuilder {\n  constructor() {\n    /** Whether to cache the generated output styles */\n    this.shouldCache = true;\n  }\n  /**\n   * Run a side effect computation given the input string and the computed styles\n   * from the build task and the host configuration object\n   * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n   */\n  sideEffect(_input, _styles, _parent) {}\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleUtils {\n  constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n    this._serverStylesheet = _serverStylesheet;\n    this._serverModuleLoaded = _serverModuleLoaded;\n    this._platformId = _platformId;\n    this.layoutConfig = layoutConfig;\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive element\n   */\n  applyStyleToElement(element, style, value = null) {\n    let styles = {};\n    if (typeof style === 'string') {\n      styles[style] = value;\n      style = styles;\n    }\n    styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    this._applyMultiValueStyleToElement(styles, element);\n  }\n  /**\n   * Applies styles given via string pair or object map to the directive's element\n   */\n  applyStyleToElements(style, elements = []) {\n    const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n    elements.forEach(el => {\n      this._applyMultiValueStyleToElement(styles, el);\n    });\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction)\n   *\n   * Check inline style first then check computed (stylesheet) style\n   */\n  getFlowDirection(target) {\n    const query = 'flex-direction';\n    let value = this.lookupStyle(target, query);\n    const hasInlineValue = this.lookupInlineStyle(target, query) || isPlatformServer(this._platformId) && this._serverModuleLoaded ? value : '';\n    return [value || 'row', hasInlineValue];\n  }\n  hasWrap(target) {\n    const query = 'flex-wrap';\n    return this.lookupStyle(target, query) === 'wrap';\n  }\n  /**\n   * Find the DOM element's raw attribute value (if any)\n   */\n  lookupAttributeValue(element, attribute) {\n    return element.getAttribute(attribute) || '';\n  }\n  /**\n   * Find the DOM element's inline style value (if any)\n   */\n  lookupInlineStyle(element, styleName) {\n    return isPlatformBrowser(this._platformId) ? element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n  }\n  /**\n   * Determine the inline or inherited CSS style\n   * NOTE: platform-server has no implementation for getComputedStyle\n   */\n  lookupStyle(element, styleName, inlineOnly = false) {\n    let value = '';\n    if (element) {\n      let immediateValue = value = this.lookupInlineStyle(element, styleName);\n      if (!immediateValue) {\n        if (isPlatformBrowser(this._platformId)) {\n          if (!inlineOnly) {\n            value = getComputedStyle(element).getPropertyValue(styleName);\n          }\n        } else {\n          if (this._serverModuleLoaded) {\n            value = this._serverStylesheet.getStyleForElement(element, styleName);\n          }\n        }\n      }\n    }\n    // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n    //       in which case getComputedStyle() should determine a valid value.\n    return value ? value.trim() : '';\n  }\n  /**\n   * Applies the styles to the element. The styles object map may contain an array of values\n   * Each value will be added as element style\n   * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n   */\n  _applyMultiValueStyleToElement(styles, element) {\n    Object.keys(styles).sort().forEach(key => {\n      const el = styles[key];\n      const values = Array.isArray(el) ? el : [el];\n      values.sort();\n      for (let value of values) {\n        value = value ? value + '' : '';\n        if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n          isPlatformBrowser(this._platformId) ? element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n        } else {\n          this._serverStylesheet.addStyleToElement(element, key, value);\n        }\n      }\n    });\n  }\n  _setServerStyle(element, styleName, styleValue) {\n    styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    const styleMap = this._readStyleAttribute(element);\n    styleMap[styleName] = styleValue || '';\n    this._writeStyleAttribute(element, styleMap);\n  }\n  _getServerStyle(element, styleName) {\n    const styleMap = this._readStyleAttribute(element);\n    return styleMap[styleName] || '';\n  }\n  _readStyleAttribute(element) {\n    const styleMap = {};\n    const styleAttribute = element.getAttribute('style');\n    if (styleAttribute) {\n      const styleList = styleAttribute.split(/;+/g);\n      for (let i = 0; i < styleList.length; i++) {\n        const style = styleList[i].trim();\n        if (style.length > 0) {\n          const colonIndex = style.indexOf(':');\n          if (colonIndex === -1) {\n            throw new Error(`Invalid CSS style: ${style}`);\n          }\n          const name = style.substr(0, colonIndex).trim();\n          styleMap[name] = style.substr(colonIndex + 1).trim();\n        }\n      }\n    }\n    return styleMap;\n  }\n  _writeStyleAttribute(element, styleMap) {\n    let styleAttrValue = '';\n    for (const key in styleMap) {\n      const newValue = styleMap[key];\n      if (newValue) {\n        styleAttrValue += key + ':' + styleMap[key] + ';';\n      }\n    }\n    element.setAttribute('style', styleAttrValue);\n  }\n}\nStyleUtils.ɵfac = function StyleUtils_Factory(t) {\n  return new (t || StyleUtils)(i0.ɵɵinject(StylesheetMap), i0.ɵɵinject(SERVER_TOKEN), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(LAYOUT_CONFIG));\n};\nStyleUtils.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StyleUtils,\n  factory: StyleUtils.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StyleUtils, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: StylesheetMap\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SERVER_TOKEN]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** HOF to sort the breakpoints by descending priority */\nfunction sortDescendingPriority(a, b) {\n  const priorityA = a ? a.priority || 0 : 0;\n  const priorityB = b ? b.priority || 0 : 0;\n  return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\nfunction sortAscendingPriority(a, b) {\n  const pA = a.priority || 0;\n  const pB = b.priority || 0;\n  return pA - pB;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n  constructor(_zone, _platformId, _document) {\n    this._zone = _zone;\n    this._platformId = _platformId;\n    this._document = _document;\n    /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n    this.source = new BehaviorSubject(new MediaChange(true));\n    this.registry = new Map();\n    this.pendingRemoveListenerFns = [];\n    this._observable$ = this.source.asObservable();\n  }\n  /**\n   * Publish list of all current activations\n   */\n  get activations() {\n    const results = [];\n    this.registry.forEach((mql, key) => {\n      if (mql.matches) {\n        results.push(key);\n      }\n    });\n    return results;\n  }\n  /**\n   * For the specified mediaQuery?\n   */\n  isActive(mediaQuery) {\n    const mql = this.registry.get(mediaQuery);\n    return !!mql ? mql.matches : this.registerQuery(mediaQuery).some(m => m.matches);\n  }\n  /**\n   * External observers can watch for all (or a specific) mql changes.\n   * Typically used by the MediaQueryAdaptor; optionally available to components\n   * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n   *\n   * Use deferred registration process to register breakpoints only on subscription\n   * This logic also enforces logic to register all mediaQueries BEFORE notify\n   * subscribers of notifications.\n   */\n  observe(mqList, filterOthers = false) {\n    if (mqList && mqList.length) {\n      const matchMedia$ = this._observable$.pipe(filter(change => !filterOthers ? true : mqList.indexOf(change.mediaQuery) > -1));\n      const registration$ = new Observable(observer => {\n        const matches = this.registerQuery(mqList);\n        if (matches.length) {\n          const lastChange = matches.pop();\n          matches.forEach(e => {\n            observer.next(e);\n          });\n          this.source.next(lastChange); // last match is cached\n        }\n\n        observer.complete();\n      });\n      return merge(registration$, matchMedia$);\n    }\n    return this._observable$;\n  }\n  /**\n   * Based on the BreakPointRegistry provider, register internal listeners for each unique\n   * mediaQuery. Each listener emits specific MediaChange data to observers\n   */\n  registerQuery(mediaQuery) {\n    const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n    const matches = [];\n    buildQueryCss(list, this._document);\n    list.forEach(query => {\n      const onMQLEvent = e => {\n        this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n      };\n      let mql = this.registry.get(query);\n      if (!mql) {\n        mql = this.buildMQL(query);\n        mql.addListener(onMQLEvent);\n        this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n        this.registry.set(query, mql);\n      }\n      if (mql.matches) {\n        matches.push(new MediaChange(true, query));\n      }\n    });\n    return matches;\n  }\n  ngOnDestroy() {\n    let fn;\n    while (fn = this.pendingRemoveListenerFns.pop()) {\n      fn();\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  buildMQL(query) {\n    return constructMql(query, isPlatformBrowser(this._platformId));\n  }\n}\nMatchMedia.ɵfac = function MatchMedia_Factory(t) {\n  return new (t || MatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT));\n};\nMatchMedia.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MatchMedia,\n  factory: MatchMedia.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatchMedia, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries, _document) {\n  const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n  if (list.length > 0) {\n    const query = list.join(', ');\n    try {\n      const styleEl = _document.createElement('style');\n      styleEl.setAttribute('type', 'text/css');\n      if (!styleEl.styleSheet) {\n        const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n        styleEl.appendChild(_document.createTextNode(cssText));\n      }\n      _document.head.appendChild(styleEl);\n      // Store in private global registry\n      list.forEach(mq => ALL_STYLES[mq] = styleEl);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\nfunction constructMql(query, isBrowser) {\n  const canListen = isBrowser && !!window.matchMedia('all').addListener;\n  return canListen ? window.matchMedia(query) : {\n    matches: query === 'all' || query === '',\n    media: query,\n    addListener: () => {},\n    removeListener: () => {},\n    onchange: null,\n    addEventListener() {},\n    removeEventListener() {},\n    dispatchEvent() {\n      return false;\n    }\n  };\n}\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nconst DEFAULT_BREAKPOINTS = [{\n  alias: 'xs',\n  mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n  priority: 1000\n}, {\n  alias: 'sm',\n  mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n  priority: 900\n}, {\n  alias: 'md',\n  mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n  priority: 800\n}, {\n  alias: 'lg',\n  mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n  priority: 700\n}, {\n  alias: 'xl',\n  mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n  priority: 600\n}, {\n  alias: 'lt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 599.98px)',\n  priority: 950\n}, {\n  alias: 'lt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 959.98px)',\n  priority: 850\n}, {\n  alias: 'lt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (max-width: 1279.98px)',\n  priority: 750\n}, {\n  alias: 'lt-xl',\n  overlapping: true,\n  priority: 650,\n  mediaQuery: 'screen and (max-width: 1919.98px)'\n}, {\n  alias: 'gt-xs',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 600px)',\n  priority: -950\n}, {\n  alias: 'gt-sm',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 960px)',\n  priority: -850\n}, {\n  alias: 'gt-md',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1280px)',\n  priority: -750\n}, {\n  alias: 'gt-lg',\n  overlapping: true,\n  mediaQuery: 'screen and (min-width: 1920px)',\n  priority: -650\n}];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n  'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n  'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n  'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n  'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n  'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n  'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n  'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n  'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n  'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nconst ORIENTATION_BREAKPOINTS = [{\n  'alias': 'handset',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET\n}, {\n  'alias': 'handset.landscape',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE\n}, {\n  'alias': 'handset.portrait',\n  priority: 2000,\n  'mediaQuery': ScreenTypes.HANDSET_PORTRAIT\n}, {\n  'alias': 'tablet',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET\n}, {\n  'alias': 'tablet.landscape',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_LANDSCAPE\n}, {\n  'alias': 'tablet.portrait',\n  priority: 2100,\n  'mediaQuery': ScreenTypes.TABLET_PORTRAIT\n}, {\n  'alias': 'web',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB,\n  overlapping: true\n}, {\n  'alias': 'web.landscape',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_LANDSCAPE,\n  overlapping: true\n}, {\n  'alias': 'web.portrait',\n  priority: 2200,\n  'mediaQuery': ScreenTypes.WEB_PORTRAIT,\n  overlapping: true\n}];\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part) {\n  let first = part.length > 0 ? part.charAt(0) : '';\n  let remainder = part.length > 1 ? part.slice(1) : '';\n  return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name) {\n  return name.replace(ALIAS_DELIMITERS, '|').split('|').map(firstUpperCase).join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nfunction validateSuffixes(list) {\n  list.forEach(bp => {\n    if (!bp.suffix) {\n      bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n      bp.overlapping = !!bp.overlapping; // ensure default value\n    }\n  });\n\n  return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nfunction mergeByAlias(defaults, custom = []) {\n  const dict = {};\n  defaults.forEach(bp => {\n    dict[bp.alias] = bp;\n  });\n  // Merge custom breakpoints\n  custom.forEach(bp => {\n    if (dict[bp.alias]) {\n      extendObject(dict[bp.alias], bp);\n    } else {\n      dict[bp.alias] = bp;\n    }\n  });\n  return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n  providedIn: 'root',\n  factory: () => {\n    const breakpoints = inject(BREAKPOINT);\n    const layoutConfig = inject(LAYOUT_CONFIG);\n    const bpFlattenArray = [].concat.apply([], (breakpoints || []).map(v => Array.isArray(v) ? v : [v]));\n    const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS).concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n    return mergeByAlias(builtIns, bpFlattenArray);\n  }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n  constructor(list) {\n    /**\n     * Memoized BreakPoint Lookups\n     */\n    this.findByMap = new Map();\n    this.items = [...list].sort(sortAscendingPriority);\n  }\n  /**\n   * Search breakpoints by alias (e.g. gt-xs)\n   */\n  findByAlias(alias) {\n    return !alias ? null : this.findWithPredicate(alias, bp => bp.alias == alias);\n  }\n  findByQuery(query) {\n    return this.findWithPredicate(query, bp => bp.mediaQuery == query);\n  }\n  /**\n   * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n   * e.g. gt-sm overlaps md, lg, and xl\n   */\n  get overlappings() {\n    return this.items.filter(it => it.overlapping == true);\n  }\n  /**\n   * Get list of all registered (non-empty) breakpoint aliases\n   */\n  get aliases() {\n    return this.items.map(it => it.alias);\n  }\n  /**\n   * Aliases are mapped to properties using suffixes\n   * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n   * for property layoutGtSM.\n   */\n  get suffixes() {\n    return this.items.map(it => !!it.suffix ? it.suffix : '');\n  }\n  /**\n   * Memoized lookup using custom predicate function\n   */\n  findWithPredicate(key, searchFn) {\n    let response = this.findByMap.get(key);\n    if (!response) {\n      response = this.items.find(searchFn) || null;\n      this.findByMap.set(key, response);\n    }\n    return response || null;\n  }\n}\nBreakPointRegistry.ɵfac = function BreakPointRegistry_Factory(t) {\n  return new (t || BreakPointRegistry)(i0.ɵɵinject(BREAKPOINTS));\n};\nBreakPointRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BreakPointRegistry,\n  factory: BreakPointRegistry.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BreakPointRegistry, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [BREAKPOINTS]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n  alias: PRINT,\n  mediaQuery: PRINT,\n  priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n  constructor(breakpoints, layoutConfig, _document) {\n    this.breakpoints = breakpoints;\n    this.layoutConfig = layoutConfig;\n    this._document = _document;\n    // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n    //  and `afterprint` event listeners.\n    this.registeredBeforeAfterPrintHooks = false;\n    // isPrintingBeforeAfterEvent is used to track if we are printing from within\n    // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n    // form `interceptEvents` so that printing is not stopped while the dialog\n    // is still open. This is an extension of the `isPrinting` property on\n    // browsers which support `beforeprint` and `afterprint` events.\n    this.isPrintingBeforeAfterEvent = false;\n    this.beforePrintEventListeners = [];\n    this.afterPrintEventListeners = [];\n    /** Is this service currently in Print-mode ? */\n    this.isPrinting = false;\n    this.queue = new PrintQueue();\n    this.deactivations = [];\n  }\n  /** Add 'print' mediaQuery: to listen for matchMedia activations */\n  withPrintQuery(queries) {\n    return [...queries, PRINT];\n  }\n  /** Is the MediaChange event for any 'print' @media */\n  isPrintEvent(e) {\n    return e.mediaQuery.startsWith(PRINT);\n  }\n  /** What is the desired mqAlias to use while printing? */\n  get printAlias() {\n    return this.layoutConfig.printWithBreakpoints || [];\n  }\n  /** Lookup breakpoints associated with print aliases. */\n  get printBreakPoints() {\n    return this.printAlias.map(alias => this.breakpoints.findByAlias(alias)).filter(bp => bp !== null);\n  }\n  /** Lookup breakpoint associated with mediaQuery */\n  getEventBreakpoints({\n    mediaQuery\n  }) {\n    const bp = this.breakpoints.findByQuery(mediaQuery);\n    const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n    return list.sort(sortDescendingPriority);\n  }\n  /** Update event with printAlias mediaQuery information */\n  updateEvent(event) {\n    let bp = this.breakpoints.findByQuery(event.mediaQuery);\n    if (this.isPrintEvent(event)) {\n      // Reset from 'print' to first (highest priority) print breakpoint\n      bp = this.getEventBreakpoints(event)[0];\n      event.mediaQuery = bp ? bp.mediaQuery : '';\n    }\n    return mergeAlias(event, bp);\n  }\n  // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n  // trigger print styles synchronously and apply proper layout styles.\n  // It is a noop if the hooks have already been registered or if the document's\n  // `defaultView` is not available.\n  registerBeforeAfterPrintHooks(target) {\n    // `defaultView` may be null when rendering on the server or in other contexts.\n    if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n      return;\n    }\n    this.registeredBeforeAfterPrintHooks = true;\n    const beforePrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      if (!this.isPrinting) {\n        this.isPrintingBeforeAfterEvent = true;\n        this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n        target.updateStyles();\n      }\n    };\n    const afterPrintListener = () => {\n      // If we aren't already printing, start printing and update the styles as\n      // if there was a regular print `MediaChange`(from matchMedia).\n      this.isPrintingBeforeAfterEvent = false;\n      if (this.isPrinting) {\n        this.stopPrinting(target);\n        target.updateStyles();\n      }\n    };\n    // Could we have teardown logic to remove if there are no print listeners being used?\n    this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n    this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n    this.beforePrintEventListeners.push(beforePrintListener);\n    this.afterPrintEventListeners.push(afterPrintListener);\n  }\n  /**\n   * Prepare RxJS filter operator with partial application\n   * @return pipeable filter predicate\n   */\n  interceptEvents(target) {\n    this.registerBeforeAfterPrintHooks(target);\n    return event => {\n      if (this.isPrintEvent(event)) {\n        if (event.matches && !this.isPrinting) {\n          this.startPrinting(target, this.getEventBreakpoints(event));\n          target.updateStyles();\n        } else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n          this.stopPrinting(target);\n          target.updateStyles();\n        }\n      } else {\n        this.collectActivations(event);\n      }\n    };\n  }\n  /** Stop mediaChange event propagation in event streams */\n  blockPropagation() {\n    return event => {\n      return !(this.isPrinting || this.isPrintEvent(event));\n    };\n  }\n  /**\n   * Save current activateBreakpoints (for later restore)\n   * and substitute only the printAlias breakpoint\n   */\n  startPrinting(target, bpList) {\n    this.isPrinting = true;\n    target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n  }\n  /** For any print de-activations, reset the entire print queue */\n  stopPrinting(target) {\n    target.activatedBreakpoints = this.deactivations;\n    this.deactivations = [];\n    this.queue.clear();\n    this.isPrinting = false;\n  }\n  /**\n   * To restore pre-Print Activations, we must capture the proper\n   * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n   * is supported; so 'print' mediaQuery activations are used as a fallback\n   * in browsers without `beforeprint` support.\n   *\n   * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n   *\n   * Let's capture all de-activations using the following logic:\n   *\n   *  When not printing:\n   *    - clear cache when activating non-print breakpoint\n   *    - update cache (and sort) when deactivating\n   *\n   *  When printing:\n   *    - sort and save when starting print\n   *    - restore as activatedTargets and clear when stop printing\n   */\n  collectActivations(event) {\n    if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n      if (!event.matches) {\n        const bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (bp) {\n          // Deactivating a breakpoint\n          this.deactivations.push(bp);\n          this.deactivations.sort(sortDescendingPriority);\n        }\n      } else if (!this.isPrintingBeforeAfterEvent) {\n        // Only clear deactivations if we aren't printing from a `beforeprint` event.\n        // Otherwise this will clear before `stopPrinting()` is called to restore\n        // the pre-Print Activations.\n        this.deactivations = [];\n      }\n    }\n  }\n  /** Teardown logic for the service. */\n  ngOnDestroy() {\n    if (this._document.defaultView) {\n      this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n      this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n    }\n  }\n}\nPrintHook.ɵfac = function PrintHook_Factory(t) {\n  return new (t || PrintHook)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(LAYOUT_CONFIG), i0.ɵɵinject(DOCUMENT));\n};\nPrintHook.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: PrintHook,\n  factory: PrintHook.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PrintHook, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n  constructor() {\n    /** Sorted queue with prioritized print breakpoints */\n    this.printBreakpoints = [];\n  }\n  addPrintBreakpoints(bpList) {\n    bpList.push(BREAKPOINT_PRINT);\n    bpList.sort(sortDescendingPriority);\n    bpList.forEach(bp => this.addBreakpoint(bp));\n    return this.printBreakpoints;\n  }\n  /** Add Print breakpoint to queue */\n  addBreakpoint(bp) {\n    if (!!bp) {\n      const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n      if (bpInList === undefined) {\n        // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n        // register as highest priority in the queue\n        this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints] : [...this.printBreakpoints, bp];\n      }\n    }\n  }\n  /** Restore original activated breakpoints and clear internal caches */\n  clear() {\n    this.printBreakpoints = [];\n  }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp) {\n  return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n  constructor(matchMedia, breakpoints, hook) {\n    this.matchMedia = matchMedia;\n    this.breakpoints = breakpoints;\n    this.hook = hook;\n    this.activatedBreakpoints = [];\n    this.elementMap = new Map();\n    this.elementKeyMap = new WeakMap();\n    this.watcherMap = new WeakMap(); // special triggers to update elements\n    this.updateMap = new WeakMap(); // callback functions to update styles\n    this.clearMap = new WeakMap(); // callback functions to clear styles\n    this.subject = new Subject();\n    this.observeActivations();\n  }\n  get activatedAlias() {\n    return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n  }\n  /**\n   * Update styles on breakpoint activates or deactivates\n   * @param mc\n   */\n  onMediaChange(mc) {\n    const bp = this.findByQuery(mc.mediaQuery);\n    if (bp) {\n      mc = mergeAlias(mc, bp);\n      if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n        this.activatedBreakpoints.push(bp);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      } else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n        // Remove the breakpoint when it's deactivated\n        this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n        this.activatedBreakpoints.sort(sortDescendingPriority);\n        this.updateStyles();\n      }\n    }\n  }\n  /**\n   * initialize the marshaller with necessary elements for delegation on an element\n   * @param element\n   * @param key\n   * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n   * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n   * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n   */\n  init(element, key, updateFn, clearFn, extraTriggers = []) {\n    initBuilderMap(this.updateMap, element, key, updateFn);\n    initBuilderMap(this.clearMap, element, key, clearFn);\n    this.buildElementKeyMap(element, key);\n    this.watchExtraTriggers(element, key, extraTriggers);\n  }\n  /**\n   * get the value for an element and key and optionally a given breakpoint\n   * @param element\n   * @param key\n   * @param bp\n   */\n  getValue(element, key, bp) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key);\n      }\n    }\n    return undefined;\n  }\n  /**\n   * whether the element has values for a given key\n   * @param element\n   * @param key\n   */\n  hasValue(element, key) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const values = this.getActivatedValues(bpMap, key);\n      if (values) {\n        return values.get(key) !== undefined || false;\n      }\n    }\n    return false;\n  }\n  /**\n   * Set the value for an input on a directive\n   * @param element the element in question\n   * @param key the type of the directive (e.g. flex, layout-gap, etc)\n   * @param bp the breakpoint suffix (empty string = default)\n   * @param val the value for the breakpoint\n   */\n  setValue(element, key, val, bp) {\n    let bpMap = this.elementMap.get(element);\n    if (!bpMap) {\n      bpMap = new Map().set(bp, new Map().set(key, val));\n      this.elementMap.set(element, bpMap);\n    } else {\n      const values = (bpMap.get(bp) || new Map()).set(key, val);\n      bpMap.set(bp, values);\n      this.elementMap.set(element, bpMap);\n    }\n    const value = this.getValue(element, key);\n    if (value !== undefined) {\n      this.updateElement(element, key, value);\n    }\n  }\n  /** Track element value changes for a specific key */\n  trackValue(element, key) {\n    return this.subject.asObservable().pipe(filter(v => v.element === element && v.key === key));\n  }\n  /** update all styles for all elements on the current breakpoint */\n  updateStyles() {\n    this.elementMap.forEach((bpMap, el) => {\n      const keyMap = new Set(this.elementKeyMap.get(el));\n      let valueMap = this.getActivatedValues(bpMap);\n      if (valueMap) {\n        valueMap.forEach((v, k) => {\n          this.updateElement(el, k, v);\n          keyMap.delete(k);\n        });\n      }\n      keyMap.forEach(k => {\n        valueMap = this.getActivatedValues(bpMap, k);\n        if (valueMap) {\n          const value = valueMap.get(k);\n          this.updateElement(el, k, value);\n        } else {\n          this.clearElement(el, k);\n        }\n      });\n    });\n  }\n  /**\n   * clear the styles for a given element\n   * @param element\n   * @param key\n   */\n  clearElement(element, key) {\n    const builders = this.clearMap.get(element);\n    if (builders) {\n      const clearFn = builders.get(key);\n      if (!!clearFn) {\n        clearFn();\n        this.subject.next({\n          element,\n          key,\n          value: ''\n        });\n      }\n    }\n  }\n  /**\n   * update a given element with the activated values for a given key\n   * @param element\n   * @param key\n   * @param value\n   */\n  updateElement(element, key, value) {\n    const builders = this.updateMap.get(element);\n    if (builders) {\n      const updateFn = builders.get(key);\n      if (!!updateFn) {\n        updateFn(value);\n        this.subject.next({\n          element,\n          key,\n          value\n        });\n      }\n    }\n  }\n  /**\n   * release all references to a given element\n   * @param element\n   */\n  releaseElement(element) {\n    const watcherMap = this.watcherMap.get(element);\n    if (watcherMap) {\n      watcherMap.forEach(s => s.unsubscribe());\n      this.watcherMap.delete(element);\n    }\n    const elementMap = this.elementMap.get(element);\n    if (elementMap) {\n      elementMap.forEach((_, s) => elementMap.delete(s));\n      this.elementMap.delete(element);\n    }\n  }\n  /**\n   * trigger an update for a given element and key (e.g. layout)\n   * @param element\n   * @param key\n   */\n  triggerUpdate(element, key) {\n    const bpMap = this.elementMap.get(element);\n    if (bpMap) {\n      const valueMap = this.getActivatedValues(bpMap, key);\n      if (valueMap) {\n        if (key) {\n          this.updateElement(element, key, valueMap.get(key));\n        } else {\n          valueMap.forEach((v, k) => this.updateElement(element, k, v));\n        }\n      }\n    }\n  }\n  /** Cross-reference for HTMLElement with directive key */\n  buildElementKeyMap(element, key) {\n    let keyMap = this.elementKeyMap.get(element);\n    if (!keyMap) {\n      keyMap = new Set();\n      this.elementKeyMap.set(element, keyMap);\n    }\n    keyMap.add(key);\n  }\n  /**\n   * Other triggers that should force style updates:\n   * - directionality\n   * - layout changes\n   * - mutationobserver updates\n   */\n  watchExtraTriggers(element, key, triggers) {\n    if (triggers && triggers.length) {\n      let watchers = this.watcherMap.get(element);\n      if (!watchers) {\n        watchers = new Map();\n        this.watcherMap.set(element, watchers);\n      }\n      const subscription = watchers.get(key);\n      if (!subscription) {\n        const newSubscription = merge(...triggers).subscribe(() => {\n          const currentValue = this.getValue(element, key);\n          this.updateElement(element, key, currentValue);\n        });\n        watchers.set(key, newSubscription);\n      }\n    }\n  }\n  /** Breakpoint locator by mediaQuery */\n  findByQuery(query) {\n    return this.breakpoints.findByQuery(query);\n  }\n  /**\n   * get the fallback breakpoint for a given element, starting with the current breakpoint\n   * @param bpMap\n   * @param key\n   */\n  getActivatedValues(bpMap, key) {\n    for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n      const activatedBp = this.activatedBreakpoints[i];\n      const valueMap = bpMap.get(activatedBp.alias);\n      if (valueMap) {\n        if (key === undefined || valueMap.has(key) && valueMap.get(key) != null) {\n          return valueMap;\n        }\n      }\n    }\n    const lastHope = bpMap.get('');\n    return key === undefined || lastHope && lastHope.has(key) ? lastHope : undefined;\n  }\n  /**\n   * Watch for mediaQuery breakpoint activations\n   */\n  observeActivations() {\n    const target = this;\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    this.matchMedia.observe(this.hook.withPrintQuery(queries)).pipe(tap(this.hook.interceptEvents(target)), filter(this.hook.blockPropagation())).subscribe(this.onMediaChange.bind(this));\n  }\n}\nMediaMarshaller.ɵfac = function MediaMarshaller_Factory(t) {\n  return new (t || MediaMarshaller)(i0.ɵɵinject(MatchMedia), i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(PrintHook));\n};\nMediaMarshaller.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaMarshaller,\n  factory: MediaMarshaller.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaMarshaller, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: MatchMedia\n    }, {\n      type: BreakPointRegistry\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\nfunction initBuilderMap(map, element, key, input) {\n  if (input !== undefined) {\n    let oldMap = map.get(element);\n    if (!oldMap) {\n      oldMap = new Map();\n      map.set(element, oldMap);\n    }\n    oldMap.set(key, input);\n  }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BaseDirective2 {\n  constructor(elementRef, styleBuilder, styler, marshal) {\n    this.elementRef = elementRef;\n    this.styleBuilder = styleBuilder;\n    this.styler = styler;\n    this.marshal = marshal;\n    this.DIRECTIVE_KEY = '';\n    this.inputs = [];\n    /** The most recently used styles for the builder */\n    this.mru = {};\n    this.destroySubject = new Subject();\n    /** Cache map for style computation */\n    this.styleCache = new Map();\n  }\n  /** Access to host element's parent DOM node */\n  get parentElement() {\n    return this.elementRef.nativeElement.parentElement;\n  }\n  /** Access to the HTMLElement for the directive */\n  get nativeElement() {\n    return this.elementRef.nativeElement;\n  }\n  /** Access to the activated value for the directive */\n  get activatedValue() {\n    return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  set activatedValue(value) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n  }\n  /** For @Input changes */\n  ngOnChanges(changes) {\n    Object.keys(changes).forEach(key => {\n      if (this.inputs.indexOf(key) !== -1) {\n        const bp = key.split('.').slice(1).join('.');\n        const val = changes[key].currentValue;\n        this.setValue(val, bp);\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.destroySubject.next();\n    this.destroySubject.complete();\n    this.marshal.releaseElement(this.nativeElement);\n  }\n  /** Register with central marshaller service */\n  init(extraTriggers = []) {\n    this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n  }\n  /** Add styles to the element using predefined style builder */\n  addStyles(input, parent) {\n    const builder = this.styleBuilder;\n    const useCache = builder.shouldCache;\n    let genStyles = this.styleCache.get(input);\n    if (!genStyles || !useCache) {\n      genStyles = builder.buildStyles(input, parent);\n      if (useCache) {\n        this.styleCache.set(input, genStyles);\n      }\n    }\n    this.mru = Object.assign({}, genStyles);\n    this.applyStyleToElement(genStyles);\n    builder.sideEffect(input, genStyles, parent);\n  }\n  /** Remove generated styles from an element using predefined style builder */\n  clearStyles() {\n    Object.keys(this.mru).forEach(k => {\n      this.mru[k] = '';\n    });\n    this.applyStyleToElement(this.mru);\n    this.mru = {};\n  }\n  /** Force trigger style updates on DOM element */\n  triggerUpdate() {\n    this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n  }\n  /**\n   * Determine the DOM element's Flexbox flow (flex-direction).\n   *\n   * Check inline style first then check computed (stylesheet) style.\n   * And optionally add the flow value to element's inline style.\n   */\n  getFlexFlowDirection(target, addIfMissing = false) {\n    if (target) {\n      const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n      if (!hasInlineValue && addIfMissing) {\n        const style = buildLayoutCSS(value);\n        const elements = [target];\n        this.styler.applyStyleToElements(style, elements);\n      }\n      return value.trim();\n    }\n    return 'row';\n  }\n  hasWrap(target) {\n    return this.styler.hasWrap(target);\n  }\n  /** Applies styles given via string pair or object map to the directive element */\n  applyStyleToElement(style, value, element = this.nativeElement) {\n    this.styler.applyStyleToElement(element, style, value);\n  }\n  setValue(val, bp) {\n    this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n  }\n  updateWithValue(input) {\n    if (this.currentValue !== input) {\n      this.addStyles(input);\n      this.currentValue = input;\n    }\n  }\n}\nBaseDirective2.ɵfac = function BaseDirective2_Factory(t) {\n  return new (t || BaseDirective2)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(StyleBuilder), i0.ɵɵdirectiveInject(StyleUtils), i0.ɵɵdirectiveInject(MediaMarshaller));\n};\nBaseDirective2.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseDirective2,\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseDirective2, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: StyleBuilder\n    }, {\n      type: StyleUtils\n    }, {\n      type: MediaMarshaller\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n  constructor(_zone, _platformId, _document, _breakpoints) {\n    super(_zone, _platformId, _document);\n    this._breakpoints = _breakpoints;\n    this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n    this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n  }\n  /** Easy method to clear all listeners for all mediaQueries */\n  clearAll() {\n    this.registry.forEach(mql => {\n      mql.destroy();\n    });\n    this.registry.clear();\n    this.useOverlaps = false;\n  }\n  /** Feature to support manual, simulated activation of a mediaQuery. */\n  activate(mediaQuery, useOverlaps = false) {\n    useOverlaps = useOverlaps || this.useOverlaps;\n    mediaQuery = this._validateQuery(mediaQuery);\n    if (useOverlaps || !this.isActive(mediaQuery)) {\n      this._deactivateAll();\n      this._registerMediaQuery(mediaQuery);\n      this._activateWithOverlaps(mediaQuery, useOverlaps);\n    }\n    return this.hasActivated;\n  }\n  /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n  _validateQuery(queryOrAlias) {\n    const bp = this._breakpoints.findByAlias(queryOrAlias);\n    return bp && bp.mediaQuery || queryOrAlias;\n  }\n  /**\n   * Manually onMediaChange any overlapping mediaQueries to simulate\n   * similar functionality in the window.matchMedia()\n   */\n  _activateWithOverlaps(mediaQuery, useOverlaps) {\n    if (useOverlaps) {\n      const bp = this._breakpoints.findByQuery(mediaQuery);\n      const alias = bp ? bp.alias : 'unknown';\n      // Simulate activation of overlapping lt-<XXX> ranges\n      switch (alias) {\n        case 'lg':\n          this._activateByAlias(['lt-xl']);\n          break;\n        case 'md':\n          this._activateByAlias(['lt-xl', 'lt-lg']);\n          break;\n        case 'sm':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n          break;\n        case 'xs':\n          this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n          break;\n      }\n      // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n      switch (alias) {\n        case 'xl':\n          this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'lg':\n          this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n          break;\n        case 'md':\n          this._activateByAlias(['gt-sm', 'gt-xs']);\n          break;\n        case 'sm':\n          this._activateByAlias(['gt-xs']);\n          break;\n      }\n    }\n    // Activate last since the responsiveActivation is watching *this* mediaQuery\n    return this._activateByQuery(mediaQuery);\n  }\n  /**\n   *\n   */\n  _activateByAlias(aliases) {\n    const activate = alias => {\n      const bp = this._breakpoints.findByAlias(alias);\n      this._activateByQuery(bp ? bp.mediaQuery : alias);\n    };\n    aliases.forEach(activate);\n  }\n  /**\n   *\n   */\n  _activateByQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this._registerMediaQuery(mediaQuery);\n    }\n    const mql = this.registry.get(mediaQuery);\n    if (mql && !this.isActive(mediaQuery)) {\n      this.registry.set(mediaQuery, mql.activate());\n    }\n    return this.hasActivated;\n  }\n  /** Deactivate all current MQLs and reset the buffer */\n  _deactivateAll() {\n    this.registry.forEach(it => {\n      it.deactivate();\n    });\n    return this;\n  }\n  /** Insure the mediaQuery is registered with MatchMedia */\n  _registerMediaQuery(mediaQuery) {\n    if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n      this.registerQuery(mediaQuery);\n    }\n  }\n  /**\n   * Call window.matchMedia() to build a MediaQueryList; which\n   * supports 0..n listeners for activation/deactivation\n   */\n  buildMQL(query) {\n    return new MockMediaQueryList(query);\n  }\n  get hasActivated() {\n    return this.activations.length > 0;\n  }\n}\nMockMatchMedia.ɵfac = function MockMatchMedia_Factory(t) {\n  return new (t || MockMatchMedia)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(BreakPointRegistry));\n};\nMockMatchMedia.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MockMatchMedia,\n  factory: MockMatchMedia.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockMatchMedia, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: BreakPointRegistry\n    }];\n  }, null);\n})();\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n  constructor(_mediaQuery) {\n    this._mediaQuery = _mediaQuery;\n    this._isActive = false;\n    this._listeners = [];\n    this.onchange = null;\n  }\n  get matches() {\n    return this._isActive;\n  }\n  get media() {\n    return this._mediaQuery;\n  }\n  /**\n   * Destroy the current list by deactivating the\n   * listeners and clearing the internal list\n   */\n  destroy() {\n    this.deactivate();\n    this._listeners = [];\n  }\n  /** Notify all listeners that 'matches === TRUE' */\n  activate() {\n    if (!this._isActive) {\n      this._isActive = true;\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /** Notify all listeners that 'matches === false' */\n  deactivate() {\n    if (this._isActive) {\n      this._isActive = false;\n      this._listeners.forEach(callback => {\n        const cb = callback;\n        cb.call(this, {\n          matches: this.matches,\n          media: this.media\n        });\n      });\n    }\n    return this;\n  }\n  /** Add a listener to our internal list to activate later */\n  addListener(listener) {\n    if (this._listeners.indexOf(listener) === -1) {\n      this._listeners.push(listener);\n    }\n    if (this._isActive) {\n      const cb = listener;\n      cb.call(this, {\n        matches: this.matches,\n        media: this.media\n      });\n    }\n  }\n  /** Don't need to remove listeners in the testing environment */\n  removeListener(_) {}\n  addEventListener(_, __, ___) {}\n  removeEventListener(_, __, ___) {}\n  dispatchEvent(_) {\n    return false;\n  }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nconst MockMatchMediaProvider = {\n  provide: MatchMedia,\n  useClass: MockMatchMedia\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Wraps the provided value in an array, unless the provided value is an array. */\nfunction coerceArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n  constructor(breakpoints, matchMedia, hook) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.hook = hook;\n    /** Filter MediaChange notifications for overlapping breakpoints */\n    this.filterOverlaps = false;\n    this.destroyed$ = new Subject();\n    this._media$ = this.watchActivations();\n    this.media$ = this._media$.pipe(filter(changes => changes.length > 0), map(changes => changes[0]));\n  }\n  /**\n   * Completes the active subject, signalling to all complete for all\n   * MediaObserver subscribers\n   */\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n  // ************************************************\n  // Public Methods\n  // ************************************************\n  /**\n   * Observe changes to current activation 'list'\n   */\n  asObservable() {\n    return this._media$;\n  }\n  /**\n   * Allow programmatic query to determine if one or more media query/alias match\n   * the current viewport size.\n   * @param value One or more media queries (or aliases) to check.\n   * @returns Whether any of the media queries match.\n   */\n  isActive(value) {\n    const aliases = splitQueries(coerceArray(value));\n    return aliases.some(alias => {\n      const query = toMediaQuery(alias, this.breakpoints);\n      return query !== null && this.matchMedia.isActive(query);\n    });\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Register all the mediaQueries registered in the BreakPointRegistry\n   * This is needed so subscribers can be auto-notified of all standard, registered\n   * mediaQuery activations\n   */\n  watchActivations() {\n    const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n    return this.buildObservable(queries);\n  }\n  /**\n   * Only pass/announce activations (not de-activations)\n   *\n   * Since multiple-mediaQueries can be activation in a cycle,\n   * gather all current activations into a single list of changes to observers\n   *\n   * Inject associated (if any) alias information into the MediaChange event\n   * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n   * - Exclude print activations that do not have an associated mediaQuery\n   *\n   * NOTE: the raw MediaChange events [from MatchMedia] do not\n   *       contain important alias information; as such this info\n   *       must be injected into the MediaChange\n   */\n  buildObservable(mqList) {\n    const hasChanges = changes => {\n      const isValidQuery = change => change.mediaQuery.length > 0;\n      return changes.filter(isValidQuery).length > 0;\n    };\n    const excludeOverlaps = changes => {\n      return !this.filterOverlaps ? changes : changes.filter(change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return !bp ? true : !bp.overlapping;\n      });\n    };\n    /**\n     */\n    return this.matchMedia.observe(this.hook.withPrintQuery(mqList)).pipe(filter(change => change.matches), debounceTime(0, asapScheduler), switchMap(_ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), takeUntil(this.destroyed$));\n  }\n  /**\n   * Find all current activations and prepare single list of activations\n   * sorted by descending priority.\n   */\n  findAllActivations() {\n    const mergeMQAlias = change => {\n      let bp = this.breakpoints.findByQuery(change.mediaQuery);\n      return mergeAlias(change, bp);\n    };\n    const replaceWithPrintAlias = change => {\n      return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n    };\n    return this.matchMedia.activations.map(query => new MediaChange(true, query)).map(replaceWithPrintAlias).map(mergeMQAlias).sort(sortDescendingPriority);\n  }\n}\nMediaObserver.ɵfac = function MediaObserver_Factory(t) {\n  return new (t || MediaObserver)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(MatchMedia), i0.ɵɵinject(PrintHook));\n};\nMediaObserver.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaObserver,\n  factory: MediaObserver.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: PrintHook\n    }];\n  }, null);\n})();\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query, locator) {\n  const bp = locator.findByAlias(query) || locator.findByQuery(query);\n  return bp ? bp.mediaQuery : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n  return queries.map(query => query.split(',')).reduce((a1, a2) => a1.concat(a2)).map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class\n */\nclass MediaTrigger {\n  constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n    this.breakpoints = breakpoints;\n    this.matchMedia = matchMedia;\n    this.layoutConfig = layoutConfig;\n    this._platformId = _platformId;\n    this._document = _document;\n    this.hasCachedRegistryMatches = false;\n    this.originalActivations = [];\n    this.originalRegistry = new Map();\n  }\n  /**\n   * Manually activate range of breakpoints\n   * @param list array of mediaQuery or alias strings\n   */\n  activate(list) {\n    list = list.map(it => it.trim()); // trim queries\n    this.saveActivations();\n    this.deactivateAll();\n    this.setActivations(list);\n    this.prepareAutoRestore();\n  }\n  /**\n   * Restore original, 'real' breakpoints and emit events\n   * to trigger stream notification\n   */\n  restore() {\n    if (this.hasCachedRegistryMatches) {\n      const extractQuery = change => change.mediaQuery;\n      const list = this.originalActivations.map(extractQuery);\n      try {\n        this.deactivateAll();\n        this.restoreRegistryMatches();\n        this.setActivations(list);\n      } finally {\n        this.originalActivations = [];\n        if (this.resizeSubscription) {\n          this.resizeSubscription.unsubscribe();\n        }\n      }\n    }\n  }\n  // ************************************************\n  // Internal Methods\n  // ************************************************\n  /**\n   * Whenever window resizes, immediately auto-restore original\n   * activations (if we are simulating activations)\n   */\n  prepareAutoRestore() {\n    const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n    const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n    if (enableAutoRestore) {\n      const resize$ = fromEvent(window, 'resize').pipe(take(1));\n      this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n    }\n  }\n  /**\n   * Notify all matchMedia subscribers of de-activations\n   *\n   * Note: we must force 'matches' updates for\n   *       future matchMedia::activation lookups\n   */\n  deactivateAll() {\n    const list = this.currentActivations;\n    this.forceRegistryMatches(list, false);\n    this.simulateMediaChanges(list, false);\n  }\n  /**\n   * Cache current activations as sorted, prioritized list of MediaChanges\n   */\n  saveActivations() {\n    if (!this.hasCachedRegistryMatches) {\n      const toMediaChange = query => new MediaChange(true, query);\n      const mergeMQAlias = change => {\n        const bp = this.breakpoints.findByQuery(change.mediaQuery);\n        return mergeAlias(change, bp);\n      };\n      this.originalActivations = this.currentActivations.map(toMediaChange).map(mergeMQAlias).sort(sortDescendingPriority);\n      this.cacheRegistryMatches();\n    }\n  }\n  /**\n   * Force set manual activations for specified mediaQuery list\n   */\n  setActivations(list) {\n    if (!!this.originalRegistry) {\n      this.forceRegistryMatches(list, true);\n    }\n    this.simulateMediaChanges(list);\n  }\n  /**\n   * For specified mediaQuery list manually simulate activations or deactivations\n   */\n  simulateMediaChanges(queries, matches = true) {\n    const toMediaQuery = query => {\n      const locator = this.breakpoints;\n      const bp = locator.findByAlias(query) || locator.findByQuery(query);\n      return bp ? bp.mediaQuery : query;\n    };\n    const emitChangeEvent = query => this.emitChangeEvent(matches, query);\n    queries.map(toMediaQuery).forEach(emitChangeEvent);\n  }\n  /**\n   * Replace current registry with simulated registry...\n   * Note: this is required since MediaQueryList::matches is 'readOnly'\n   */\n  forceRegistryMatches(queries, matches) {\n    const registry = new Map();\n    queries.forEach(query => {\n      registry.set(query, {\n        matches\n      });\n    });\n    this.matchMedia.registry = registry;\n  }\n  /**\n   * Save current MatchMedia::registry items.\n   */\n  cacheRegistryMatches() {\n    const target = this.originalRegistry;\n    target.clear();\n    this.matchMedia.registry.forEach((value, key) => {\n      target.set(key, value);\n    });\n    this.hasCachedRegistryMatches = true;\n  }\n  /**\n   * Restore original, 'true' registry\n   */\n  restoreRegistryMatches() {\n    const target = this.matchMedia.registry;\n    target.clear();\n    this.originalRegistry.forEach((value, key) => {\n      target.set(key, value);\n    });\n    this.originalRegistry.clear();\n    this.hasCachedRegistryMatches = false;\n  }\n  /**\n   * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n   */\n  emitChangeEvent(matches, query) {\n    this.matchMedia.source.next(new MediaChange(matches, query));\n  }\n  get currentActivations() {\n    return this.matchMedia.activations;\n  }\n}\nMediaTrigger.ɵfac = function MediaTrigger_Factory(t) {\n  return new (t || MediaTrigger)(i0.ɵɵinject(BreakPointRegistry), i0.ɵɵinject(MatchMedia), i0.ɵɵinject(LAYOUT_CONFIG), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(DOCUMENT));\n};\nMediaTrigger.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MediaTrigger,\n  factory: MediaTrigger.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MediaTrigger, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: BreakPointRegistry\n    }, {\n      type: MatchMedia\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [LAYOUT_CONFIG]\n      }]\n    }, {\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n  let parts = [grow, shrink, basis];\n  let j = basis.indexOf('calc');\n  if (j > 0) {\n    parts[2] = _validateCalcValue(basis.substring(j).trim());\n    let matches = basis.substr(0, j).trim().split(' ');\n    if (matches.length == 2) {\n      parts[0] = matches[0];\n      parts[1] = matches[1];\n    }\n  } else if (j == 0) {\n    parts[2] = _validateCalcValue(basis.trim());\n  } else {\n    let matches = basis.split(' ');\n    parts = matches.length === 3 ? matches : [grow, shrink, basis];\n  }\n  return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc) {\n  return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider };","map":{"version":3,"names":["i0","APP_BOOTSTRAP_LISTENER","PLATFORM_ID","NgModule","Injectable","InjectionToken","Inject","inject","Directive","isPlatformBrowser","DOCUMENT","isPlatformServer","BehaviorSubject","Observable","merge","Subject","asapScheduler","of","fromEvent","applyCssPrefixes","extendObject","buildLayoutCSS","filter","tap","map","debounceTime","switchMap","takeUntil","take","removeStyles","_document","platformId","elements","Array","from","querySelectorAll","CLASS_NAME","classRegex","forEach","el","classList","contains","parentNode","removeChild","className","replace","BROWSER_PROVIDER","provide","useFactory","deps","multi","CoreModule","ɵfac","ɵmod","ɵinj","type","args","providers","MediaChange","constructor","matches","mediaQuery","mqAlias","suffix","priority","property","clone","StylesheetMap","stylesheet","Map","addStyleToElement","element","style","value","get","set","clearStyles","clear","getStyleForElement","styleName","styles","ɵprov","providedIn","DEFAULT_CONFIG","addFlexToParent","addOrientationBps","disableDefaultBps","disableVendorPrefixes","serverLoaded","useColumnBasisZero","printWithBreakpoints","mediaTriggerAutoRestore","ssrObserveBreakpoints","LAYOUT_CONFIG","factory","SERVER_TOKEN","BREAKPOINT","mergeAlias","dest","source","alias","StyleBuilder","shouldCache","sideEffect","_input","_styles","_parent","StyleUtils","_serverStylesheet","_serverModuleLoaded","_platformId","layoutConfig","applyStyleToElement","_applyMultiValueStyleToElement","applyStyleToElements","getFlowDirection","target","query","lookupStyle","hasInlineValue","lookupInlineStyle","hasWrap","lookupAttributeValue","attribute","getAttribute","getPropertyValue","_getServerStyle","inlineOnly","immediateValue","getComputedStyle","trim","Object","keys","sort","key","values","isArray","setProperty","_setServerStyle","styleValue","toLowerCase","styleMap","_readStyleAttribute","_writeStyleAttribute","styleAttribute","styleList","split","i","length","colonIndex","indexOf","Error","name","substr","styleAttrValue","newValue","setAttribute","undefined","decorators","sortDescendingPriority","a","b","priorityA","priorityB","sortAscendingPriority","pA","pB","MatchMedia","_zone","registry","pendingRemoveListenerFns","_observable$","asObservable","activations","results","mql","push","isActive","registerQuery","some","m","observe","mqList","filterOthers","matchMedia$","pipe","change","registration$","observer","lastChange","pop","e","next","complete","list","buildQueryCss","onMQLEvent","run","buildMQL","addListener","removeListener","ngOnDestroy","fn","constructMql","NgZone","ALL_STYLES","mediaQueries","it","join","styleEl","createElement","styleSheet","cssText","appendChild","createTextNode","head","mq","console","error","isBrowser","canListen","window","matchMedia","media","onchange","addEventListener","removeEventListener","dispatchEvent","DEFAULT_BREAKPOINTS","overlapping","HANDSET_PORTRAIT","HANDSET_LANDSCAPE","TABLET_PORTRAIT","TABLET_LANDSCAPE","WEB_PORTRAIT","WEB_LANDSCAPE","ScreenTypes","ORIENTATION_BREAKPOINTS","HANDSET","TABLET","WEB","ALIAS_DELIMITERS","firstUpperCase","part","first","charAt","remainder","slice","toUpperCase","camelCase","validateSuffixes","bp","mergeByAlias","defaults","custom","dict","k","BREAKPOINTS","breakpoints","bpFlattenArray","concat","apply","v","builtIns","BreakPointRegistry","findByMap","items","findByAlias","findWithPredicate","findByQuery","overlappings","aliases","suffixes","searchFn","response","find","PRINT","BREAKPOINT_PRINT","PrintHook","registeredBeforeAfterPrintHooks","isPrintingBeforeAfterEvent","beforePrintEventListeners","afterPrintEventListeners","isPrinting","queue","PrintQueue","deactivations","withPrintQuery","queries","isPrintEvent","startsWith","printAlias","printBreakPoints","getEventBreakpoints","updateEvent","event","registerBeforeAfterPrintHooks","defaultView","beforePrintListener","startPrinting","updateStyles","afterPrintListener","stopPrinting","interceptEvents","collectActivations","blockPropagation","bpList","activatedBreakpoints","addPrintBreakpoints","l","printBreakpoints","addBreakpoint","bpInList","isPrintBreakPoint","MediaMarshaller","hook","elementMap","elementKeyMap","WeakMap","watcherMap","updateMap","clearMap","subject","observeActivations","activatedAlias","onMediaChange","mc","splice","init","updateFn","clearFn","extraTriggers","initBuilderMap","buildElementKeyMap","watchExtraTriggers","getValue","bpMap","getActivatedValues","hasValue","setValue","val","updateElement","trackValue","keyMap","Set","valueMap","delete","clearElement","builders","releaseElement","s","unsubscribe","_","triggerUpdate","add","triggers","watchers","subscription","newSubscription","subscribe","currentValue","activatedBp","has","lastHope","bind","input","oldMap","BaseDirective2","elementRef","styleBuilder","styler","marshal","DIRECTIVE_KEY","inputs","mru","destroySubject","styleCache","parentElement","nativeElement","activatedValue","ngOnChanges","changes","updateWithValue","addStyles","parent","builder","useCache","genStyles","buildStyles","assign","getFlexFlowDirection","addIfMissing","ElementRef","ɵdir","MockMatchMedia","_breakpoints","autoRegisterQueries","useOverlaps","clearAll","destroy","activate","_validateQuery","_deactivateAll","_registerMediaQuery","_activateWithOverlaps","hasActivated","queryOrAlias","_activateByAlias","_activateByQuery","deactivate","MockMediaQueryList","_mediaQuery","_isActive","_listeners","callback","cb","call","listener","__","___","MockMatchMediaProvider","useClass","coerceArray","MediaObserver","filterOverlaps","destroyed$","_media$","watchActivations","media$","splitQueries","toMediaQuery","buildObservable","hasChanges","isValidQuery","excludeOverlaps","findAllActivations","mergeMQAlias","replaceWithPrintAlias","locator","reduce","a1","a2","MediaTrigger","hasCachedRegistryMatches","originalActivations","originalRegistry","saveActivations","deactivateAll","setActivations","prepareAutoRestore","restore","extractQuery","restoreRegistryMatches","resizeSubscription","enableAutoRestore","resize$","currentActivations","forceRegistryMatches","simulateMediaChanges","toMediaChange","cacheRegistryMatches","emitChangeEvent","validateBasis","basis","grow","shrink","parts","j","_validateCalcValue","substring","calc","ɵMatchMedia","ɵMockMatchMedia","ɵMockMatchMediaProvider"],"sources":["C:/MY_folder/Pan_App/pan/node_modules/@angular/flex-layout/fesm2015/angular-flex-layout-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { APP_BOOTSTRAP_LISTENER, PLATFORM_ID, NgModule, Injectable, InjectionToken, Inject, inject, Directive } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, isPlatformServer } from '@angular/common';\nimport { BehaviorSubject, Observable, merge, Subject, asapScheduler, of, fromEvent } from 'rxjs';\nimport { applyCssPrefixes, extendObject, buildLayoutCSS } from '@angular/flex-layout/_private-utils';\nimport { filter, tap, map, debounceTime, switchMap, takeUntil, take } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Find all of the server-generated stylings, if any, and remove them\n * This will be in the form of inline classes and the style block in the\n * head of the DOM\n */\nfunction removeStyles(_document, platformId) {\n    return () => {\n        if (isPlatformBrowser(platformId)) {\n            const elements = Array.from(_document.querySelectorAll(`[class*=${CLASS_NAME}]`));\n            // RegExp constructor should only be used if passing a variable to the constructor.\n            // When using static regular expression it is more performant to use reg exp literal.\n            // This is also needed to provide Safari 9 compatibility, please see\n            // https://stackoverflow.com/questions/37919802 for more discussion.\n            const classRegex = /\\bflex-layout-.+?\\b/g;\n            elements.forEach(el => {\n                el.classList.contains(`${CLASS_NAME}ssr`) && el.parentNode ?\n                    el.parentNode.removeChild(el) : el.className.replace(classRegex, '');\n            });\n        }\n    };\n}\n/**\n *  Provider to remove SSR styles on the browser\n */\nconst BROWSER_PROVIDER = {\n    provide: APP_BOOTSTRAP_LISTENER,\n    useFactory: removeStyles,\n    deps: [DOCUMENT, PLATFORM_ID],\n    multi: true\n};\nconst CLASS_NAME = 'flex-layout-';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * *****************************************************************\n * Define module for common Angular Layout utilities\n * *****************************************************************\n */\nclass CoreModule {\n}\nCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CoreModule });\nCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CoreModule, providers: [BROWSER_PROVIDER] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: CoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [BROWSER_PROVIDER]\n                }]\n        }] });\n\n/**\n * Class instances emitted [to observers] for each mql notification\n */\nclass MediaChange {\n    /**\n     * @param matches whether the mediaQuery is currently activated\n     * @param mediaQuery e.g. (min-width: 600px) and (max-width: 959px)\n     * @param mqAlias e.g. gt-sm, md, gt-lg\n     * @param suffix e.g. GtSM, Md, GtLg\n     * @param priority the priority of activation for the given breakpoint\n     */\n    constructor(matches = false, mediaQuery = 'all', mqAlias = '', suffix = '', priority = 0) {\n        this.matches = matches;\n        this.mediaQuery = mediaQuery;\n        this.mqAlias = mqAlias;\n        this.suffix = suffix;\n        this.priority = priority;\n        this.property = '';\n    }\n    /** Create an exact copy of the MediaChange */\n    clone() {\n        return new MediaChange(this.matches, this.mediaQuery, this.mqAlias, this.suffix);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Utility to emulate a CSS stylesheet\n *\n * This utility class stores all of the styles for a given HTML element\n * as a readonly `stylesheet` map.\n */\nclass StylesheetMap {\n    constructor() {\n        this.stylesheet = new Map();\n    }\n    /**\n     * Add an individual style to an HTML element\n     */\n    addStyleToElement(element, style, value) {\n        const stylesheet = this.stylesheet.get(element);\n        if (stylesheet) {\n            stylesheet.set(style, value);\n        }\n        else {\n            this.stylesheet.set(element, new Map([[style, value]]));\n        }\n    }\n    /**\n     * Clear the virtual stylesheet\n     */\n    clearStyles() {\n        this.stylesheet.clear();\n    }\n    /**\n     * Retrieve a given style for an HTML element\n     */\n    getStyleForElement(el, styleName) {\n        const styles = this.stylesheet.get(el);\n        let value = '';\n        if (styles) {\n            const style = styles.get(styleName);\n            if (typeof style === 'number' || typeof style === 'string') {\n                value = style + '';\n            }\n        }\n        return value;\n    }\n}\nStylesheetMap.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StylesheetMap, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nStylesheetMap.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StylesheetMap, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StylesheetMap, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DEFAULT_CONFIG = {\n    addFlexToParent: true,\n    addOrientationBps: false,\n    disableDefaultBps: false,\n    disableVendorPrefixes: false,\n    serverLoaded: false,\n    useColumnBasisZero: true,\n    printWithBreakpoints: [],\n    mediaTriggerAutoRestore: true,\n    ssrObserveBreakpoints: [],\n};\nconst LAYOUT_CONFIG = new InjectionToken('Flex Layout token, config options for the library', {\n    providedIn: 'root',\n    factory: () => DEFAULT_CONFIG\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token that is provided to tell whether the FlexLayoutServerModule\n * has been included in the bundle\n *\n * NOTE: This can be manually provided to disable styles when using SSR\n */\nconst SERVER_TOKEN = new InjectionToken('FlexLayoutServerLoaded', {\n    providedIn: 'root',\n    factory: () => false\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst BREAKPOINT = new InjectionToken('Flex Layout token, collect all breakpoints into one provider', {\n    providedIn: 'root',\n    factory: () => null\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * For the specified MediaChange, make sure it contains the breakpoint alias\n * and suffix (if available).\n */\nfunction mergeAlias(dest, source) {\n    dest = dest ? dest.clone() : new MediaChange();\n    if (source) {\n        dest.mqAlias = source.alias;\n        dest.mediaQuery = source.mediaQuery;\n        dest.suffix = source.suffix;\n        dest.priority = source.priority;\n    }\n    return dest;\n}\n\n/** A class that encapsulates CSS style generation for common directives */\nclass StyleBuilder {\n    constructor() {\n        /** Whether to cache the generated output styles */\n        this.shouldCache = true;\n    }\n    /**\n     * Run a side effect computation given the input string and the computed styles\n     * from the build task and the host configuration object\n     * NOTE: This should be a no-op unless an algorithm is provided in a subclass\n     */\n    sideEffect(_input, _styles, _parent) {\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass StyleUtils {\n    constructor(_serverStylesheet, _serverModuleLoaded, _platformId, layoutConfig) {\n        this._serverStylesheet = _serverStylesheet;\n        this._serverModuleLoaded = _serverModuleLoaded;\n        this._platformId = _platformId;\n        this.layoutConfig = layoutConfig;\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive element\n     */\n    applyStyleToElement(element, style, value = null) {\n        let styles = {};\n        if (typeof style === 'string') {\n            styles[style] = value;\n            style = styles;\n        }\n        styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        this._applyMultiValueStyleToElement(styles, element);\n    }\n    /**\n     * Applies styles given via string pair or object map to the directive's element\n     */\n    applyStyleToElements(style, elements = []) {\n        const styles = this.layoutConfig.disableVendorPrefixes ? style : applyCssPrefixes(style);\n        elements.forEach(el => {\n            this._applyMultiValueStyleToElement(styles, el);\n        });\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction)\n     *\n     * Check inline style first then check computed (stylesheet) style\n     */\n    getFlowDirection(target) {\n        const query = 'flex-direction';\n        let value = this.lookupStyle(target, query);\n        const hasInlineValue = this.lookupInlineStyle(target, query) ||\n            (isPlatformServer(this._platformId) && this._serverModuleLoaded) ? value : '';\n        return [value || 'row', hasInlineValue];\n    }\n    hasWrap(target) {\n        const query = 'flex-wrap';\n        return this.lookupStyle(target, query) === 'wrap';\n    }\n    /**\n     * Find the DOM element's raw attribute value (if any)\n     */\n    lookupAttributeValue(element, attribute) {\n        return element.getAttribute(attribute) || '';\n    }\n    /**\n     * Find the DOM element's inline style value (if any)\n     */\n    lookupInlineStyle(element, styleName) {\n        return isPlatformBrowser(this._platformId) ?\n            element.style.getPropertyValue(styleName) : this._getServerStyle(element, styleName);\n    }\n    /**\n     * Determine the inline or inherited CSS style\n     * NOTE: platform-server has no implementation for getComputedStyle\n     */\n    lookupStyle(element, styleName, inlineOnly = false) {\n        let value = '';\n        if (element) {\n            let immediateValue = value = this.lookupInlineStyle(element, styleName);\n            if (!immediateValue) {\n                if (isPlatformBrowser(this._platformId)) {\n                    if (!inlineOnly) {\n                        value = getComputedStyle(element).getPropertyValue(styleName);\n                    }\n                }\n                else {\n                    if (this._serverModuleLoaded) {\n                        value = this._serverStylesheet.getStyleForElement(element, styleName);\n                    }\n                }\n            }\n        }\n        // Note: 'inline' is the default of all elements, unless UA stylesheet overrides;\n        //       in which case getComputedStyle() should determine a valid value.\n        return value ? value.trim() : '';\n    }\n    /**\n     * Applies the styles to the element. The styles object map may contain an array of values\n     * Each value will be added as element style\n     * Keys are sorted to add prefixed styles (like -webkit-x) first, before the standard ones\n     */\n    _applyMultiValueStyleToElement(styles, element) {\n        Object.keys(styles).sort().forEach(key => {\n            const el = styles[key];\n            const values = Array.isArray(el) ? el : [el];\n            values.sort();\n            for (let value of values) {\n                value = value ? value + '' : '';\n                if (isPlatformBrowser(this._platformId) || !this._serverModuleLoaded) {\n                    isPlatformBrowser(this._platformId) ?\n                        element.style.setProperty(key, value) : this._setServerStyle(element, key, value);\n                }\n                else {\n                    this._serverStylesheet.addStyleToElement(element, key, value);\n                }\n            }\n        });\n    }\n    _setServerStyle(element, styleName, styleValue) {\n        styleName = styleName.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        const styleMap = this._readStyleAttribute(element);\n        styleMap[styleName] = styleValue || '';\n        this._writeStyleAttribute(element, styleMap);\n    }\n    _getServerStyle(element, styleName) {\n        const styleMap = this._readStyleAttribute(element);\n        return styleMap[styleName] || '';\n    }\n    _readStyleAttribute(element) {\n        const styleMap = {};\n        const styleAttribute = element.getAttribute('style');\n        if (styleAttribute) {\n            const styleList = styleAttribute.split(/;+/g);\n            for (let i = 0; i < styleList.length; i++) {\n                const style = styleList[i].trim();\n                if (style.length > 0) {\n                    const colonIndex = style.indexOf(':');\n                    if (colonIndex === -1) {\n                        throw new Error(`Invalid CSS style: ${style}`);\n                    }\n                    const name = style.substr(0, colonIndex).trim();\n                    styleMap[name] = style.substr(colonIndex + 1).trim();\n                }\n            }\n        }\n        return styleMap;\n    }\n    _writeStyleAttribute(element, styleMap) {\n        let styleAttrValue = '';\n        for (const key in styleMap) {\n            const newValue = styleMap[key];\n            if (newValue) {\n                styleAttrValue += key + ':' + styleMap[key] + ';';\n            }\n        }\n        element.setAttribute('style', styleAttrValue);\n    }\n}\nStyleUtils.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StyleUtils, deps: [{ token: StylesheetMap }, { token: SERVER_TOKEN }, { token: PLATFORM_ID }, { token: LAYOUT_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\nStyleUtils.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StyleUtils, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: StyleUtils, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: StylesheetMap }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [SERVER_TOKEN]\n                    }] }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LAYOUT_CONFIG]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** HOF to sort the breakpoints by descending priority */\nfunction sortDescendingPriority(a, b) {\n    const priorityA = a ? a.priority || 0 : 0;\n    const priorityB = b ? b.priority || 0 : 0;\n    return priorityB - priorityA;\n}\n/** HOF to sort the breakpoints by ascending priority */\nfunction sortAscendingPriority(a, b) {\n    const pA = a.priority || 0;\n    const pB = b.priority || 0;\n    return pA - pB;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMonitor configures listeners to mediaQuery changes and publishes an Observable facade to\n * convert mediaQuery change callbacks to subscriber notifications. These notifications will be\n * performed within the ng Zone to trigger change detections and component updates.\n *\n * NOTE: both mediaQuery activations and de-activations are announced in notifications\n */\nclass MatchMedia {\n    constructor(_zone, _platformId, _document) {\n        this._zone = _zone;\n        this._platformId = _platformId;\n        this._document = _document;\n        /** Initialize source with 'all' so all non-responsive APIs trigger style updates */\n        this.source = new BehaviorSubject(new MediaChange(true));\n        this.registry = new Map();\n        this.pendingRemoveListenerFns = [];\n        this._observable$ = this.source.asObservable();\n    }\n    /**\n     * Publish list of all current activations\n     */\n    get activations() {\n        const results = [];\n        this.registry.forEach((mql, key) => {\n            if (mql.matches) {\n                results.push(key);\n            }\n        });\n        return results;\n    }\n    /**\n     * For the specified mediaQuery?\n     */\n    isActive(mediaQuery) {\n        const mql = this.registry.get(mediaQuery);\n        return !!mql ? mql.matches : this.registerQuery(mediaQuery).some(m => m.matches);\n    }\n    /**\n     * External observers can watch for all (or a specific) mql changes.\n     * Typically used by the MediaQueryAdaptor; optionally available to components\n     * who wish to use the MediaMonitor as mediaMonitor$ observable service.\n     *\n     * Use deferred registration process to register breakpoints only on subscription\n     * This logic also enforces logic to register all mediaQueries BEFORE notify\n     * subscribers of notifications.\n     */\n    observe(mqList, filterOthers = false) {\n        if (mqList && mqList.length) {\n            const matchMedia$ = this._observable$.pipe(filter((change) => !filterOthers ? true : (mqList.indexOf(change.mediaQuery) > -1)));\n            const registration$ = new Observable((observer) => {\n                const matches = this.registerQuery(mqList);\n                if (matches.length) {\n                    const lastChange = matches.pop();\n                    matches.forEach((e) => {\n                        observer.next(e);\n                    });\n                    this.source.next(lastChange); // last match is cached\n                }\n                observer.complete();\n            });\n            return merge(registration$, matchMedia$);\n        }\n        return this._observable$;\n    }\n    /**\n     * Based on the BreakPointRegistry provider, register internal listeners for each unique\n     * mediaQuery. Each listener emits specific MediaChange data to observers\n     */\n    registerQuery(mediaQuery) {\n        const list = Array.isArray(mediaQuery) ? mediaQuery : [mediaQuery];\n        const matches = [];\n        buildQueryCss(list, this._document);\n        list.forEach((query) => {\n            const onMQLEvent = (e) => {\n                this._zone.run(() => this.source.next(new MediaChange(e.matches, query)));\n            };\n            let mql = this.registry.get(query);\n            if (!mql) {\n                mql = this.buildMQL(query);\n                mql.addListener(onMQLEvent);\n                this.pendingRemoveListenerFns.push(() => mql.removeListener(onMQLEvent));\n                this.registry.set(query, mql);\n            }\n            if (mql.matches) {\n                matches.push(new MediaChange(true, query));\n            }\n        });\n        return matches;\n    }\n    ngOnDestroy() {\n        let fn;\n        while (fn = this.pendingRemoveListenerFns.pop()) {\n            fn();\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return constructMql(query, isPlatformBrowser(this._platformId));\n    }\n}\nMatchMedia.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMatchMedia.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MatchMedia, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MatchMedia, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n/**\n * Private global registry for all dynamically-created, injected style tags\n * @see prepare(query)\n */\nconst ALL_STYLES = {};\n/**\n * For Webkit engines that only trigger the MediaQueryList Listener\n * when there is at least one CSS selector for the respective media query.\n *\n * @param mediaQueries\n * @param _document\n */\nfunction buildQueryCss(mediaQueries, _document) {\n    const list = mediaQueries.filter(it => !ALL_STYLES[it]);\n    if (list.length > 0) {\n        const query = list.join(', ');\n        try {\n            const styleEl = _document.createElement('style');\n            styleEl.setAttribute('type', 'text/css');\n            if (!styleEl.styleSheet) {\n                const cssText = `\n/*\n  @angular/flex-layout - workaround for possible browser quirk with mediaQuery listeners\n  see http://bit.ly/2sd4HMP\n*/\n@media ${query} {.fx-query-test{ }}\n`;\n                styleEl.appendChild(_document.createTextNode(cssText));\n            }\n            _document.head.appendChild(styleEl);\n            // Store in private global registry\n            list.forEach(mq => ALL_STYLES[mq] = styleEl);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n}\nfunction constructMql(query, isBrowser) {\n    const canListen = isBrowser && !!window.matchMedia('all').addListener;\n    return canListen ? window.matchMedia(query) : {\n        matches: query === 'all' || query === '',\n        media: query,\n        addListener: () => {\n        },\n        removeListener: () => {\n        },\n        onchange: null,\n        addEventListener() {\n        },\n        removeEventListener() {\n        },\n        dispatchEvent() {\n            return false;\n        }\n    };\n}\n\n/**\n * NOTE: Smaller ranges have HIGHER priority since the match is more specific\n */\nconst DEFAULT_BREAKPOINTS = [\n    {\n        alias: 'xs',\n        mediaQuery: 'screen and (min-width: 0px) and (max-width: 599.98px)',\n        priority: 1000,\n    },\n    {\n        alias: 'sm',\n        mediaQuery: 'screen and (min-width: 600px) and (max-width: 959.98px)',\n        priority: 900,\n    },\n    {\n        alias: 'md',\n        mediaQuery: 'screen and (min-width: 960px) and (max-width: 1279.98px)',\n        priority: 800,\n    },\n    {\n        alias: 'lg',\n        mediaQuery: 'screen and (min-width: 1280px) and (max-width: 1919.98px)',\n        priority: 700,\n    },\n    {\n        alias: 'xl',\n        mediaQuery: 'screen and (min-width: 1920px) and (max-width: 4999.98px)',\n        priority: 600,\n    },\n    {\n        alias: 'lt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 599.98px)',\n        priority: 950,\n    },\n    {\n        alias: 'lt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 959.98px)',\n        priority: 850,\n    },\n    {\n        alias: 'lt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (max-width: 1279.98px)',\n        priority: 750,\n    },\n    {\n        alias: 'lt-xl',\n        overlapping: true,\n        priority: 650,\n        mediaQuery: 'screen and (max-width: 1919.98px)',\n    },\n    {\n        alias: 'gt-xs',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 600px)',\n        priority: -950,\n    },\n    {\n        alias: 'gt-sm',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 960px)',\n        priority: -850,\n    }, {\n        alias: 'gt-md',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1280px)',\n        priority: -750,\n    },\n    {\n        alias: 'gt-lg',\n        overlapping: true,\n        mediaQuery: 'screen and (min-width: 1920px)',\n        priority: -650,\n    }\n];\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/* tslint:disable */\nconst HANDSET_PORTRAIT = '(orientation: portrait) and (max-width: 599.98px)';\nconst HANDSET_LANDSCAPE = '(orientation: landscape) and (max-width: 959.98px)';\nconst TABLET_PORTRAIT = '(orientation: portrait) and (min-width: 600px) and (max-width: 839.98px)';\nconst TABLET_LANDSCAPE = '(orientation: landscape) and (min-width: 960px) and (max-width: 1279.98px)';\nconst WEB_PORTRAIT = '(orientation: portrait) and (min-width: 840px)';\nconst WEB_LANDSCAPE = '(orientation: landscape) and (min-width: 1280px)';\nconst ScreenTypes = {\n    'HANDSET': `${HANDSET_PORTRAIT}, ${HANDSET_LANDSCAPE}`,\n    'TABLET': `${TABLET_PORTRAIT} , ${TABLET_LANDSCAPE}`,\n    'WEB': `${WEB_PORTRAIT}, ${WEB_LANDSCAPE} `,\n    'HANDSET_PORTRAIT': `${HANDSET_PORTRAIT}`,\n    'TABLET_PORTRAIT': `${TABLET_PORTRAIT} `,\n    'WEB_PORTRAIT': `${WEB_PORTRAIT}`,\n    'HANDSET_LANDSCAPE': `${HANDSET_LANDSCAPE}`,\n    'TABLET_LANDSCAPE': `${TABLET_LANDSCAPE}`,\n    'WEB_LANDSCAPE': `${WEB_LANDSCAPE}`\n};\n/**\n * Extended Breakpoints for handset/tablets with landscape or portrait orientations\n */\nconst ORIENTATION_BREAKPOINTS = [\n    { 'alias': 'handset', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET },\n    { 'alias': 'handset.landscape', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_LANDSCAPE },\n    { 'alias': 'handset.portrait', priority: 2000, 'mediaQuery': ScreenTypes.HANDSET_PORTRAIT },\n    { 'alias': 'tablet', priority: 2100, 'mediaQuery': ScreenTypes.TABLET },\n    { 'alias': 'tablet.landscape', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_LANDSCAPE },\n    { 'alias': 'tablet.portrait', priority: 2100, 'mediaQuery': ScreenTypes.TABLET_PORTRAIT },\n    { 'alias': 'web', priority: 2200, 'mediaQuery': ScreenTypes.WEB, overlapping: true },\n    { 'alias': 'web.landscape', priority: 2200, 'mediaQuery': ScreenTypes.WEB_LANDSCAPE, overlapping: true },\n    { 'alias': 'web.portrait', priority: 2200, 'mediaQuery': ScreenTypes.WEB_PORTRAIT, overlapping: true }\n];\n\nconst ALIAS_DELIMITERS = /(\\.|-|_)/g;\nfunction firstUpperCase(part) {\n    let first = part.length > 0 ? part.charAt(0) : '';\n    let remainder = (part.length > 1) ? part.slice(1) : '';\n    return first.toUpperCase() + remainder;\n}\n/**\n * Converts snake-case to SnakeCase.\n * @param name Text to UpperCamelCase\n */\nfunction camelCase(name) {\n    return name\n        .replace(ALIAS_DELIMITERS, '|')\n        .split('|')\n        .map(firstUpperCase)\n        .join('');\n}\n/**\n * For each breakpoint, ensure that a Suffix is defined;\n * fallback to UpperCamelCase the unique Alias value\n */\nfunction validateSuffixes(list) {\n    list.forEach((bp) => {\n        if (!bp.suffix) {\n            bp.suffix = camelCase(bp.alias); // create Suffix value based on alias\n            bp.overlapping = !!bp.overlapping; // ensure default value\n        }\n    });\n    return list;\n}\n/**\n * Merge a custom breakpoint list with the default list based on unique alias values\n *  - Items are added if the alias is not in the default list\n *  - Items are merged with the custom override if the alias exists in the default list\n */\nfunction mergeByAlias(defaults, custom = []) {\n    const dict = {};\n    defaults.forEach(bp => {\n        dict[bp.alias] = bp;\n    });\n    // Merge custom breakpoints\n    custom.forEach((bp) => {\n        if (dict[bp.alias]) {\n            extendObject(dict[bp.alias], bp);\n        }\n        else {\n            dict[bp.alias] = bp;\n        }\n    });\n    return validateSuffixes(Object.keys(dict).map(k => dict[k]));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n *  Injection token unique to the flex-layout library.\n *  Use this token when build a custom provider (see below).\n */\nconst BREAKPOINTS = new InjectionToken('Token (@angular/flex-layout) Breakpoints', {\n    providedIn: 'root',\n    factory: () => {\n        const breakpoints = inject(BREAKPOINT);\n        const layoutConfig = inject(LAYOUT_CONFIG);\n        const bpFlattenArray = [].concat.apply([], (breakpoints || [])\n            .map((v) => Array.isArray(v) ? v : [v]));\n        const builtIns = (layoutConfig.disableDefaultBps ? [] : DEFAULT_BREAKPOINTS)\n            .concat(layoutConfig.addOrientationBps ? ORIENTATION_BREAKPOINTS : []);\n        return mergeByAlias(builtIns, bpFlattenArray);\n    }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Registry of 1..n MediaQuery breakpoint ranges\n * This is published as a provider and may be overridden from custom, application-specific ranges\n *\n */\nclass BreakPointRegistry {\n    constructor(list) {\n        /**\n         * Memoized BreakPoint Lookups\n         */\n        this.findByMap = new Map();\n        this.items = [...list].sort(sortAscendingPriority);\n    }\n    /**\n     * Search breakpoints by alias (e.g. gt-xs)\n     */\n    findByAlias(alias) {\n        return !alias ? null : this.findWithPredicate(alias, (bp) => bp.alias == alias);\n    }\n    findByQuery(query) {\n        return this.findWithPredicate(query, (bp) => bp.mediaQuery == query);\n    }\n    /**\n     * Get all the breakpoints whose ranges could overlapping `normal` ranges;\n     * e.g. gt-sm overlaps md, lg, and xl\n     */\n    get overlappings() {\n        return this.items.filter(it => it.overlapping == true);\n    }\n    /**\n     * Get list of all registered (non-empty) breakpoint aliases\n     */\n    get aliases() {\n        return this.items.map(it => it.alias);\n    }\n    /**\n     * Aliases are mapped to properties using suffixes\n     * e.g.  'gt-sm' for property 'layout'  uses suffix 'GtSm'\n     * for property layoutGtSM.\n     */\n    get suffixes() {\n        return this.items.map(it => !!it.suffix ? it.suffix : '');\n    }\n    /**\n     * Memoized lookup using custom predicate function\n     */\n    findWithPredicate(key, searchFn) {\n        let response = this.findByMap.get(key);\n        if (!response) {\n            response = this.items.find(searchFn) || null;\n            this.findByMap.set(key, response);\n        }\n        return response || null;\n    }\n}\nBreakPointRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BreakPointRegistry, deps: [{ token: BREAKPOINTS }], target: i0.ɵɵFactoryTarget.Injectable });\nBreakPointRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BreakPointRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BreakPointRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [BREAKPOINTS]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst PRINT = 'print';\nconst BREAKPOINT_PRINT = {\n    alias: PRINT,\n    mediaQuery: PRINT,\n    priority: 1000\n};\n/**\n * PrintHook - Use to intercept print MediaQuery activations and force\n *             layouts to render with the specified print alias/breakpoint\n *\n * Used in MediaMarshaller and MediaObserver\n */\nclass PrintHook {\n    constructor(breakpoints, layoutConfig, _document) {\n        this.breakpoints = breakpoints;\n        this.layoutConfig = layoutConfig;\n        this._document = _document;\n        // registeredBeforeAfterPrintHooks tracks if we registered the `beforeprint`\n        //  and `afterprint` event listeners.\n        this.registeredBeforeAfterPrintHooks = false;\n        // isPrintingBeforeAfterEvent is used to track if we are printing from within\n        // a `beforeprint` event handler. This prevents the typicall `stopPrinting`\n        // form `interceptEvents` so that printing is not stopped while the dialog\n        // is still open. This is an extension of the `isPrinting` property on\n        // browsers which support `beforeprint` and `afterprint` events.\n        this.isPrintingBeforeAfterEvent = false;\n        this.beforePrintEventListeners = [];\n        this.afterPrintEventListeners = [];\n        /** Is this service currently in Print-mode ? */\n        this.isPrinting = false;\n        this.queue = new PrintQueue();\n        this.deactivations = [];\n    }\n    /** Add 'print' mediaQuery: to listen for matchMedia activations */\n    withPrintQuery(queries) {\n        return [...queries, PRINT];\n    }\n    /** Is the MediaChange event for any 'print' @media */\n    isPrintEvent(e) {\n        return e.mediaQuery.startsWith(PRINT);\n    }\n    /** What is the desired mqAlias to use while printing? */\n    get printAlias() {\n        return this.layoutConfig.printWithBreakpoints || [];\n    }\n    /** Lookup breakpoints associated with print aliases. */\n    get printBreakPoints() {\n        return this.printAlias\n            .map(alias => this.breakpoints.findByAlias(alias))\n            .filter(bp => bp !== null);\n    }\n    /** Lookup breakpoint associated with mediaQuery */\n    getEventBreakpoints({ mediaQuery }) {\n        const bp = this.breakpoints.findByQuery(mediaQuery);\n        const list = bp ? [...this.printBreakPoints, bp] : this.printBreakPoints;\n        return list.sort(sortDescendingPriority);\n    }\n    /** Update event with printAlias mediaQuery information */\n    updateEvent(event) {\n        let bp = this.breakpoints.findByQuery(event.mediaQuery);\n        if (this.isPrintEvent(event)) {\n            // Reset from 'print' to first (highest priority) print breakpoint\n            bp = this.getEventBreakpoints(event)[0];\n            event.mediaQuery = bp ? bp.mediaQuery : '';\n        }\n        return mergeAlias(event, bp);\n    }\n    // registerBeforeAfterPrintHooks registers a `beforeprint` event hook so we can\n    // trigger print styles synchronously and apply proper layout styles.\n    // It is a noop if the hooks have already been registered or if the document's\n    // `defaultView` is not available.\n    registerBeforeAfterPrintHooks(target) {\n        // `defaultView` may be null when rendering on the server or in other contexts.\n        if (!this._document.defaultView || this.registeredBeforeAfterPrintHooks) {\n            return;\n        }\n        this.registeredBeforeAfterPrintHooks = true;\n        const beforePrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            if (!this.isPrinting) {\n                this.isPrintingBeforeAfterEvent = true;\n                this.startPrinting(target, this.getEventBreakpoints(new MediaChange(true, PRINT)));\n                target.updateStyles();\n            }\n        };\n        const afterPrintListener = () => {\n            // If we aren't already printing, start printing and update the styles as\n            // if there was a regular print `MediaChange`(from matchMedia).\n            this.isPrintingBeforeAfterEvent = false;\n            if (this.isPrinting) {\n                this.stopPrinting(target);\n                target.updateStyles();\n            }\n        };\n        // Could we have teardown logic to remove if there are no print listeners being used?\n        this._document.defaultView.addEventListener('beforeprint', beforePrintListener);\n        this._document.defaultView.addEventListener('afterprint', afterPrintListener);\n        this.beforePrintEventListeners.push(beforePrintListener);\n        this.afterPrintEventListeners.push(afterPrintListener);\n    }\n    /**\n     * Prepare RxJS filter operator with partial application\n     * @return pipeable filter predicate\n     */\n    interceptEvents(target) {\n        this.registerBeforeAfterPrintHooks(target);\n        return (event) => {\n            if (this.isPrintEvent(event)) {\n                if (event.matches && !this.isPrinting) {\n                    this.startPrinting(target, this.getEventBreakpoints(event));\n                    target.updateStyles();\n                }\n                else if (!event.matches && this.isPrinting && !this.isPrintingBeforeAfterEvent) {\n                    this.stopPrinting(target);\n                    target.updateStyles();\n                }\n            }\n            else {\n                this.collectActivations(event);\n            }\n        };\n    }\n    /** Stop mediaChange event propagation in event streams */\n    blockPropagation() {\n        return (event) => {\n            return !(this.isPrinting || this.isPrintEvent(event));\n        };\n    }\n    /**\n     * Save current activateBreakpoints (for later restore)\n     * and substitute only the printAlias breakpoint\n     */\n    startPrinting(target, bpList) {\n        this.isPrinting = true;\n        target.activatedBreakpoints = this.queue.addPrintBreakpoints(bpList);\n    }\n    /** For any print de-activations, reset the entire print queue */\n    stopPrinting(target) {\n        target.activatedBreakpoints = this.deactivations;\n        this.deactivations = [];\n        this.queue.clear();\n        this.isPrinting = false;\n    }\n    /**\n     * To restore pre-Print Activations, we must capture the proper\n     * list of breakpoint activations BEFORE print starts. OnBeforePrint()\n     * is supported; so 'print' mediaQuery activations are used as a fallback\n     * in browsers without `beforeprint` support.\n     *\n     * >  But activated breakpoints are deactivated BEFORE 'print' activation.\n     *\n     * Let's capture all de-activations using the following logic:\n     *\n     *  When not printing:\n     *    - clear cache when activating non-print breakpoint\n     *    - update cache (and sort) when deactivating\n     *\n     *  When printing:\n     *    - sort and save when starting print\n     *    - restore as activatedTargets and clear when stop printing\n     */\n    collectActivations(event) {\n        if (!this.isPrinting || this.isPrintingBeforeAfterEvent) {\n            if (!event.matches) {\n                const bp = this.breakpoints.findByQuery(event.mediaQuery);\n                if (bp) { // Deactivating a breakpoint\n                    this.deactivations.push(bp);\n                    this.deactivations.sort(sortDescendingPriority);\n                }\n            }\n            else if (!this.isPrintingBeforeAfterEvent) {\n                // Only clear deactivations if we aren't printing from a `beforeprint` event.\n                // Otherwise this will clear before `stopPrinting()` is called to restore\n                // the pre-Print Activations.\n                this.deactivations = [];\n            }\n        }\n    }\n    /** Teardown logic for the service. */\n    ngOnDestroy() {\n        if (this._document.defaultView) {\n            this.beforePrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('beforeprint', l));\n            this.afterPrintEventListeners.forEach(l => this._document.defaultView.removeEventListener('afterprint', l));\n        }\n    }\n}\nPrintHook.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: PrintHook, deps: [{ token: BreakPointRegistry }, { token: LAYOUT_CONFIG }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nPrintHook.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: PrintHook, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: PrintHook, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: BreakPointRegistry }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LAYOUT_CONFIG]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n// ************************************************************************\n// Internal Utility class 'PrintQueue'\n// ************************************************************************\n/**\n * Utility class to manage print breakpoints + activatedBreakpoints\n * with correct sorting WHILE printing\n */\nclass PrintQueue {\n    constructor() {\n        /** Sorted queue with prioritized print breakpoints */\n        this.printBreakpoints = [];\n    }\n    addPrintBreakpoints(bpList) {\n        bpList.push(BREAKPOINT_PRINT);\n        bpList.sort(sortDescendingPriority);\n        bpList.forEach(bp => this.addBreakpoint(bp));\n        return this.printBreakpoints;\n    }\n    /** Add Print breakpoint to queue */\n    addBreakpoint(bp) {\n        if (!!bp) {\n            const bpInList = this.printBreakpoints.find(it => it.mediaQuery === bp.mediaQuery);\n            if (bpInList === undefined) {\n                // If this is a `printAlias` breakpoint, then append. If a true 'print' breakpoint,\n                // register as highest priority in the queue\n                this.printBreakpoints = isPrintBreakPoint(bp) ? [bp, ...this.printBreakpoints]\n                    : [...this.printBreakpoints, bp];\n            }\n        }\n    }\n    /** Restore original activated breakpoints and clear internal caches */\n    clear() {\n        this.printBreakpoints = [];\n    }\n}\n// ************************************************************************\n// Internal Utility methods\n// ************************************************************************\n/** Only support intercept queueing if the Breakpoint is a print @media query */\nfunction isPrintBreakPoint(bp) {\n    return bp ? bp.mediaQuery.startsWith(PRINT) : false;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaMarshaller - register responsive values from directives and\n *                   trigger them based on media query events\n */\nclass MediaMarshaller {\n    constructor(matchMedia, breakpoints, hook) {\n        this.matchMedia = matchMedia;\n        this.breakpoints = breakpoints;\n        this.hook = hook;\n        this.activatedBreakpoints = [];\n        this.elementMap = new Map();\n        this.elementKeyMap = new WeakMap();\n        this.watcherMap = new WeakMap(); // special triggers to update elements\n        this.updateMap = new WeakMap(); // callback functions to update styles\n        this.clearMap = new WeakMap(); // callback functions to clear styles\n        this.subject = new Subject();\n        this.observeActivations();\n    }\n    get activatedAlias() {\n        return this.activatedBreakpoints[0] ? this.activatedBreakpoints[0].alias : '';\n    }\n    /**\n     * Update styles on breakpoint activates or deactivates\n     * @param mc\n     */\n    onMediaChange(mc) {\n        const bp = this.findByQuery(mc.mediaQuery);\n        if (bp) {\n            mc = mergeAlias(mc, bp);\n            if (mc.matches && this.activatedBreakpoints.indexOf(bp) === -1) {\n                this.activatedBreakpoints.push(bp);\n                this.activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n            else if (!mc.matches && this.activatedBreakpoints.indexOf(bp) !== -1) {\n                // Remove the breakpoint when it's deactivated\n                this.activatedBreakpoints.splice(this.activatedBreakpoints.indexOf(bp), 1);\n                this.activatedBreakpoints.sort(sortDescendingPriority);\n                this.updateStyles();\n            }\n        }\n    }\n    /**\n     * initialize the marshaller with necessary elements for delegation on an element\n     * @param element\n     * @param key\n     * @param updateFn optional callback so that custom bp directives don't have to re-provide this\n     * @param clearFn optional callback so that custom bp directives don't have to re-provide this\n     * @param extraTriggers other triggers to force style updates (e.g. layout, directionality, etc)\n     */\n    init(element, key, updateFn, clearFn, extraTriggers = []) {\n        initBuilderMap(this.updateMap, element, key, updateFn);\n        initBuilderMap(this.clearMap, element, key, clearFn);\n        this.buildElementKeyMap(element, key);\n        this.watchExtraTriggers(element, key, extraTriggers);\n    }\n    /**\n     * get the value for an element and key and optionally a given breakpoint\n     * @param element\n     * @param key\n     * @param bp\n     */\n    getValue(element, key, bp) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = bp !== undefined ? bpMap.get(bp) : this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key);\n            }\n        }\n        return undefined;\n    }\n    /**\n     * whether the element has values for a given key\n     * @param element\n     * @param key\n     */\n    hasValue(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const values = this.getActivatedValues(bpMap, key);\n            if (values) {\n                return values.get(key) !== undefined || false;\n            }\n        }\n        return false;\n    }\n    /**\n     * Set the value for an input on a directive\n     * @param element the element in question\n     * @param key the type of the directive (e.g. flex, layout-gap, etc)\n     * @param bp the breakpoint suffix (empty string = default)\n     * @param val the value for the breakpoint\n     */\n    setValue(element, key, val, bp) {\n        let bpMap = this.elementMap.get(element);\n        if (!bpMap) {\n            bpMap = new Map().set(bp, new Map().set(key, val));\n            this.elementMap.set(element, bpMap);\n        }\n        else {\n            const values = (bpMap.get(bp) || new Map()).set(key, val);\n            bpMap.set(bp, values);\n            this.elementMap.set(element, bpMap);\n        }\n        const value = this.getValue(element, key);\n        if (value !== undefined) {\n            this.updateElement(element, key, value);\n        }\n    }\n    /** Track element value changes for a specific key */\n    trackValue(element, key) {\n        return this.subject\n            .asObservable()\n            .pipe(filter(v => v.element === element && v.key === key));\n    }\n    /** update all styles for all elements on the current breakpoint */\n    updateStyles() {\n        this.elementMap.forEach((bpMap, el) => {\n            const keyMap = new Set(this.elementKeyMap.get(el));\n            let valueMap = this.getActivatedValues(bpMap);\n            if (valueMap) {\n                valueMap.forEach((v, k) => {\n                    this.updateElement(el, k, v);\n                    keyMap.delete(k);\n                });\n            }\n            keyMap.forEach(k => {\n                valueMap = this.getActivatedValues(bpMap, k);\n                if (valueMap) {\n                    const value = valueMap.get(k);\n                    this.updateElement(el, k, value);\n                }\n                else {\n                    this.clearElement(el, k);\n                }\n            });\n        });\n    }\n    /**\n     * clear the styles for a given element\n     * @param element\n     * @param key\n     */\n    clearElement(element, key) {\n        const builders = this.clearMap.get(element);\n        if (builders) {\n            const clearFn = builders.get(key);\n            if (!!clearFn) {\n                clearFn();\n                this.subject.next({ element, key, value: '' });\n            }\n        }\n    }\n    /**\n     * update a given element with the activated values for a given key\n     * @param element\n     * @param key\n     * @param value\n     */\n    updateElement(element, key, value) {\n        const builders = this.updateMap.get(element);\n        if (builders) {\n            const updateFn = builders.get(key);\n            if (!!updateFn) {\n                updateFn(value);\n                this.subject.next({ element, key, value });\n            }\n        }\n    }\n    /**\n     * release all references to a given element\n     * @param element\n     */\n    releaseElement(element) {\n        const watcherMap = this.watcherMap.get(element);\n        if (watcherMap) {\n            watcherMap.forEach(s => s.unsubscribe());\n            this.watcherMap.delete(element);\n        }\n        const elementMap = this.elementMap.get(element);\n        if (elementMap) {\n            elementMap.forEach((_, s) => elementMap.delete(s));\n            this.elementMap.delete(element);\n        }\n    }\n    /**\n     * trigger an update for a given element and key (e.g. layout)\n     * @param element\n     * @param key\n     */\n    triggerUpdate(element, key) {\n        const bpMap = this.elementMap.get(element);\n        if (bpMap) {\n            const valueMap = this.getActivatedValues(bpMap, key);\n            if (valueMap) {\n                if (key) {\n                    this.updateElement(element, key, valueMap.get(key));\n                }\n                else {\n                    valueMap.forEach((v, k) => this.updateElement(element, k, v));\n                }\n            }\n        }\n    }\n    /** Cross-reference for HTMLElement with directive key */\n    buildElementKeyMap(element, key) {\n        let keyMap = this.elementKeyMap.get(element);\n        if (!keyMap) {\n            keyMap = new Set();\n            this.elementKeyMap.set(element, keyMap);\n        }\n        keyMap.add(key);\n    }\n    /**\n     * Other triggers that should force style updates:\n     * - directionality\n     * - layout changes\n     * - mutationobserver updates\n     */\n    watchExtraTriggers(element, key, triggers) {\n        if (triggers && triggers.length) {\n            let watchers = this.watcherMap.get(element);\n            if (!watchers) {\n                watchers = new Map();\n                this.watcherMap.set(element, watchers);\n            }\n            const subscription = watchers.get(key);\n            if (!subscription) {\n                const newSubscription = merge(...triggers).subscribe(() => {\n                    const currentValue = this.getValue(element, key);\n                    this.updateElement(element, key, currentValue);\n                });\n                watchers.set(key, newSubscription);\n            }\n        }\n    }\n    /** Breakpoint locator by mediaQuery */\n    findByQuery(query) {\n        return this.breakpoints.findByQuery(query);\n    }\n    /**\n     * get the fallback breakpoint for a given element, starting with the current breakpoint\n     * @param bpMap\n     * @param key\n     */\n    getActivatedValues(bpMap, key) {\n        for (let i = 0; i < this.activatedBreakpoints.length; i++) {\n            const activatedBp = this.activatedBreakpoints[i];\n            const valueMap = bpMap.get(activatedBp.alias);\n            if (valueMap) {\n                if (key === undefined || (valueMap.has(key) && valueMap.get(key) != null)) {\n                    return valueMap;\n                }\n            }\n        }\n        const lastHope = bpMap.get('');\n        return (key === undefined || lastHope && lastHope.has(key)) ? lastHope : undefined;\n    }\n    /**\n     * Watch for mediaQuery breakpoint activations\n     */\n    observeActivations() {\n        const target = this;\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        this.matchMedia\n            .observe(this.hook.withPrintQuery(queries))\n            .pipe(tap(this.hook.interceptEvents(target)), filter(this.hook.blockPropagation()))\n            .subscribe(this.onMediaChange.bind(this));\n    }\n}\nMediaMarshaller.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaMarshaller, deps: [{ token: MatchMedia }, { token: BreakPointRegistry }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaMarshaller.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaMarshaller, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaMarshaller, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: MatchMedia }, { type: BreakPointRegistry }, { type: PrintHook }]; } });\nfunction initBuilderMap(map, element, key, input) {\n    if (input !== undefined) {\n        let oldMap = map.get(element);\n        if (!oldMap) {\n            oldMap = new Map();\n            map.set(element, oldMap);\n        }\n        oldMap.set(key, input);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass BaseDirective2 {\n    constructor(elementRef, styleBuilder, styler, marshal) {\n        this.elementRef = elementRef;\n        this.styleBuilder = styleBuilder;\n        this.styler = styler;\n        this.marshal = marshal;\n        this.DIRECTIVE_KEY = '';\n        this.inputs = [];\n        /** The most recently used styles for the builder */\n        this.mru = {};\n        this.destroySubject = new Subject();\n        /** Cache map for style computation */\n        this.styleCache = new Map();\n    }\n    /** Access to host element's parent DOM node */\n    get parentElement() {\n        return this.elementRef.nativeElement.parentElement;\n    }\n    /** Access to the HTMLElement for the directive */\n    get nativeElement() {\n        return this.elementRef.nativeElement;\n    }\n    /** Access to the activated value for the directive */\n    get activatedValue() {\n        return this.marshal.getValue(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    set activatedValue(value) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, value, this.marshal.activatedAlias);\n    }\n    /** For @Input changes */\n    ngOnChanges(changes) {\n        Object.keys(changes).forEach(key => {\n            if (this.inputs.indexOf(key) !== -1) {\n                const bp = key.split('.').slice(1).join('.');\n                const val = changes[key].currentValue;\n                this.setValue(val, bp);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this.destroySubject.next();\n        this.destroySubject.complete();\n        this.marshal.releaseElement(this.nativeElement);\n    }\n    /** Register with central marshaller service */\n    init(extraTriggers = []) {\n        this.marshal.init(this.elementRef.nativeElement, this.DIRECTIVE_KEY, this.updateWithValue.bind(this), this.clearStyles.bind(this), extraTriggers);\n    }\n    /** Add styles to the element using predefined style builder */\n    addStyles(input, parent) {\n        const builder = this.styleBuilder;\n        const useCache = builder.shouldCache;\n        let genStyles = this.styleCache.get(input);\n        if (!genStyles || !useCache) {\n            genStyles = builder.buildStyles(input, parent);\n            if (useCache) {\n                this.styleCache.set(input, genStyles);\n            }\n        }\n        this.mru = Object.assign({}, genStyles);\n        this.applyStyleToElement(genStyles);\n        builder.sideEffect(input, genStyles, parent);\n    }\n    /** Remove generated styles from an element using predefined style builder */\n    clearStyles() {\n        Object.keys(this.mru).forEach(k => {\n            this.mru[k] = '';\n        });\n        this.applyStyleToElement(this.mru);\n        this.mru = {};\n    }\n    /** Force trigger style updates on DOM element */\n    triggerUpdate() {\n        this.marshal.triggerUpdate(this.nativeElement, this.DIRECTIVE_KEY);\n    }\n    /**\n     * Determine the DOM element's Flexbox flow (flex-direction).\n     *\n     * Check inline style first then check computed (stylesheet) style.\n     * And optionally add the flow value to element's inline style.\n     */\n    getFlexFlowDirection(target, addIfMissing = false) {\n        if (target) {\n            const [value, hasInlineValue] = this.styler.getFlowDirection(target);\n            if (!hasInlineValue && addIfMissing) {\n                const style = buildLayoutCSS(value);\n                const elements = [target];\n                this.styler.applyStyleToElements(style, elements);\n            }\n            return value.trim();\n        }\n        return 'row';\n    }\n    hasWrap(target) {\n        return this.styler.hasWrap(target);\n    }\n    /** Applies styles given via string pair or object map to the directive element */\n    applyStyleToElement(style, value, element = this.nativeElement) {\n        this.styler.applyStyleToElement(element, style, value);\n    }\n    setValue(val, bp) {\n        this.marshal.setValue(this.nativeElement, this.DIRECTIVE_KEY, val, bp);\n    }\n    updateWithValue(input) {\n        if (this.currentValue !== input) {\n            this.addStyles(input);\n            this.currentValue = input;\n        }\n    }\n}\nBaseDirective2.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BaseDirective2, deps: [{ token: i0.ElementRef }, { token: StyleBuilder }, { token: StyleUtils }, { token: MediaMarshaller }], target: i0.ɵɵFactoryTarget.Directive });\nBaseDirective2.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.2\", type: BaseDirective2, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: BaseDirective2, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: StyleBuilder }, { type: StyleUtils }, { type: MediaMarshaller }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MockMatchMedia mocks calls to the Window API matchMedia with a build of a simulated\n * MockMediaQueryListener. Methods are available to simulate an activation of a mediaQuery\n * range and to clearAll mediaQuery listeners.\n */\nclass MockMatchMedia extends MatchMedia {\n    constructor(_zone, _platformId, _document, _breakpoints) {\n        super(_zone, _platformId, _document);\n        this._breakpoints = _breakpoints;\n        this.autoRegisterQueries = true; // Used for testing BreakPoint registrations\n        this.useOverlaps = false; // Allow fallback to overlapping mediaQueries\n    }\n    /** Easy method to clear all listeners for all mediaQueries */\n    clearAll() {\n        this.registry.forEach((mql) => {\n            mql.destroy();\n        });\n        this.registry.clear();\n        this.useOverlaps = false;\n    }\n    /** Feature to support manual, simulated activation of a mediaQuery. */\n    activate(mediaQuery, useOverlaps = false) {\n        useOverlaps = useOverlaps || this.useOverlaps;\n        mediaQuery = this._validateQuery(mediaQuery);\n        if (useOverlaps || !this.isActive(mediaQuery)) {\n            this._deactivateAll();\n            this._registerMediaQuery(mediaQuery);\n            this._activateWithOverlaps(mediaQuery, useOverlaps);\n        }\n        return this.hasActivated;\n    }\n    /** Converts an optional mediaQuery alias to a specific, valid mediaQuery */\n    _validateQuery(queryOrAlias) {\n        const bp = this._breakpoints.findByAlias(queryOrAlias);\n        return (bp && bp.mediaQuery) || queryOrAlias;\n    }\n    /**\n     * Manually onMediaChange any overlapping mediaQueries to simulate\n     * similar functionality in the window.matchMedia()\n     */\n    _activateWithOverlaps(mediaQuery, useOverlaps) {\n        if (useOverlaps) {\n            const bp = this._breakpoints.findByQuery(mediaQuery);\n            const alias = bp ? bp.alias : 'unknown';\n            // Simulate activation of overlapping lt-<XXX> ranges\n            switch (alias) {\n                case 'lg':\n                    this._activateByAlias(['lt-xl']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['lt-xl', 'lt-lg']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md']);\n                    break;\n                case 'xs':\n                    this._activateByAlias(['lt-xl', 'lt-lg', 'lt-md', 'lt-sm']);\n                    break;\n            }\n            // Simulate activation of overlapping gt-<xxxx> mediaQuery ranges\n            switch (alias) {\n                case 'xl':\n                    this._activateByAlias(['gt-lg', 'gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'lg':\n                    this._activateByAlias(['gt-md', 'gt-sm', 'gt-xs']);\n                    break;\n                case 'md':\n                    this._activateByAlias(['gt-sm', 'gt-xs']);\n                    break;\n                case 'sm':\n                    this._activateByAlias(['gt-xs']);\n                    break;\n            }\n        }\n        // Activate last since the responsiveActivation is watching *this* mediaQuery\n        return this._activateByQuery(mediaQuery);\n    }\n    /**\n     *\n     */\n    _activateByAlias(aliases) {\n        const activate = (alias) => {\n            const bp = this._breakpoints.findByAlias(alias);\n            this._activateByQuery(bp ? bp.mediaQuery : alias);\n        };\n        aliases.forEach(activate);\n    }\n    /**\n     *\n     */\n    _activateByQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this._registerMediaQuery(mediaQuery);\n        }\n        const mql = this.registry.get(mediaQuery);\n        if (mql && !this.isActive(mediaQuery)) {\n            this.registry.set(mediaQuery, mql.activate());\n        }\n        return this.hasActivated;\n    }\n    /** Deactivate all current MQLs and reset the buffer */\n    _deactivateAll() {\n        this.registry.forEach((it) => {\n            it.deactivate();\n        });\n        return this;\n    }\n    /** Insure the mediaQuery is registered with MatchMedia */\n    _registerMediaQuery(mediaQuery) {\n        if (!this.registry.has(mediaQuery) && this.autoRegisterQueries) {\n            this.registerQuery(mediaQuery);\n        }\n    }\n    /**\n     * Call window.matchMedia() to build a MediaQueryList; which\n     * supports 0..n listeners for activation/deactivation\n     */\n    buildMQL(query) {\n        return new MockMediaQueryList(query);\n    }\n    get hasActivated() {\n        return this.activations.length > 0;\n    }\n}\nMockMatchMedia.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MockMatchMedia, deps: [{ token: i0.NgZone }, { token: PLATFORM_ID }, { token: DOCUMENT }, { token: BreakPointRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nMockMatchMedia.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MockMatchMedia });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MockMatchMedia, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: BreakPointRegistry }];\n    } });\n/**\n * Special internal class to simulate a MediaQueryList and\n * - supports manual activation to simulate mediaQuery matching\n * - manages listeners\n */\nclass MockMediaQueryList {\n    constructor(_mediaQuery) {\n        this._mediaQuery = _mediaQuery;\n        this._isActive = false;\n        this._listeners = [];\n        this.onchange = null;\n    }\n    get matches() {\n        return this._isActive;\n    }\n    get media() {\n        return this._mediaQuery;\n    }\n    /**\n     * Destroy the current list by deactivating the\n     * listeners and clearing the internal list\n     */\n    destroy() {\n        this.deactivate();\n        this._listeners = [];\n    }\n    /** Notify all listeners that 'matches === TRUE' */\n    activate() {\n        if (!this._isActive) {\n            this._isActive = true;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Notify all listeners that 'matches === false' */\n    deactivate() {\n        if (this._isActive) {\n            this._isActive = false;\n            this._listeners.forEach((callback) => {\n                const cb = callback;\n                cb.call(this, { matches: this.matches, media: this.media });\n            });\n        }\n        return this;\n    }\n    /** Add a listener to our internal list to activate later */\n    addListener(listener) {\n        if (this._listeners.indexOf(listener) === -1) {\n            this._listeners.push(listener);\n        }\n        if (this._isActive) {\n            const cb = listener;\n            cb.call(this, { matches: this.matches, media: this.media });\n        }\n    }\n    /** Don't need to remove listeners in the testing environment */\n    removeListener(_) {\n    }\n    addEventListener(_, __, ___) {\n    }\n    removeEventListener(_, __, ___) {\n    }\n    dispatchEvent(_) {\n        return false;\n    }\n}\n/**\n * Pre-configured provider for MockMatchMedia\n */\nconst MockMatchMediaProvider = {\n    provide: MatchMedia,\n    useClass: MockMatchMedia\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Wraps the provided value in an array, unless the provided value is an array. */\nfunction coerceArray(value) {\n    return Array.isArray(value) ? value : [value];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * MediaObserver enables applications to listen for 1..n mediaQuery activations and to determine\n * if a mediaQuery is currently activated.\n *\n * Since a breakpoint change will first deactivate 1...n mediaQueries and then possibly activate\n * 1..n mediaQueries, the MediaObserver will debounce notifications and report ALL *activations*\n * in 1 event notification. The reported activations will be sorted in descending priority order.\n *\n * This class uses the BreakPoint Registry to inject alias information into the raw MediaChange\n * notification. For custom mediaQuery notifications, alias information will not be injected and\n * those fields will be ''.\n *\n * Note: Developers should note that only mediaChange activations (not de-activations)\n *       are announced by the MediaObserver.\n *\n *  @usage\n *\n *  // RxJS\n *  import { filter } from 'rxjs/operators';\n *  import { MediaObserver } from '@angular/flex-layout';\n *\n *  @Component({ ... })\n *  export class AppComponent {\n *    status: string = '';\n *\n *    constructor(mediaObserver: MediaObserver) {\n *      const media$ = mediaObserver.asObservable().pipe(\n *        filter((changes: MediaChange[]) => true)   // silly noop filter\n *      );\n *\n *      media$.subscribe((changes: MediaChange[]) => {\n *        let status = '';\n *        changes.forEach( change => {\n *          status += `'${change.mqAlias}' = (${change.mediaQuery}) <br/>` ;\n *        });\n *        this.status = status;\n *     });\n *\n *    }\n *  }\n */\nclass MediaObserver {\n    constructor(breakpoints, matchMedia, hook) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.hook = hook;\n        /** Filter MediaChange notifications for overlapping breakpoints */\n        this.filterOverlaps = false;\n        this.destroyed$ = new Subject();\n        this._media$ = this.watchActivations();\n        this.media$ = this._media$.pipe(filter((changes) => changes.length > 0), map((changes) => changes[0]));\n    }\n    /**\n     * Completes the active subject, signalling to all complete for all\n     * MediaObserver subscribers\n     */\n    ngOnDestroy() {\n        this.destroyed$.next();\n        this.destroyed$.complete();\n    }\n    // ************************************************\n    // Public Methods\n    // ************************************************\n    /**\n     * Observe changes to current activation 'list'\n     */\n    asObservable() {\n        return this._media$;\n    }\n    /**\n     * Allow programmatic query to determine if one or more media query/alias match\n     * the current viewport size.\n     * @param value One or more media queries (or aliases) to check.\n     * @returns Whether any of the media queries match.\n     */\n    isActive(value) {\n        const aliases = splitQueries(coerceArray(value));\n        return aliases.some(alias => {\n            const query = toMediaQuery(alias, this.breakpoints);\n            return query !== null && this.matchMedia.isActive(query);\n        });\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Register all the mediaQueries registered in the BreakPointRegistry\n     * This is needed so subscribers can be auto-notified of all standard, registered\n     * mediaQuery activations\n     */\n    watchActivations() {\n        const queries = this.breakpoints.items.map(bp => bp.mediaQuery);\n        return this.buildObservable(queries);\n    }\n    /**\n     * Only pass/announce activations (not de-activations)\n     *\n     * Since multiple-mediaQueries can be activation in a cycle,\n     * gather all current activations into a single list of changes to observers\n     *\n     * Inject associated (if any) alias information into the MediaChange event\n     * - Exclude mediaQuery activations for overlapping mQs. List bounded mQ ranges only\n     * - Exclude print activations that do not have an associated mediaQuery\n     *\n     * NOTE: the raw MediaChange events [from MatchMedia] do not\n     *       contain important alias information; as such this info\n     *       must be injected into the MediaChange\n     */\n    buildObservable(mqList) {\n        const hasChanges = (changes) => {\n            const isValidQuery = (change) => (change.mediaQuery.length > 0);\n            return (changes.filter(isValidQuery).length > 0);\n        };\n        const excludeOverlaps = (changes) => {\n            return !this.filterOverlaps ? changes : changes.filter(change => {\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return !bp ? true : !bp.overlapping;\n            });\n        };\n        /**\n         */\n        return this.matchMedia\n            .observe(this.hook.withPrintQuery(mqList))\n            .pipe(filter((change) => change.matches), debounceTime(0, asapScheduler), switchMap(_ => of(this.findAllActivations())), map(excludeOverlaps), filter(hasChanges), takeUntil(this.destroyed$));\n    }\n    /**\n     * Find all current activations and prepare single list of activations\n     * sorted by descending priority.\n     */\n    findAllActivations() {\n        const mergeMQAlias = (change) => {\n            let bp = this.breakpoints.findByQuery(change.mediaQuery);\n            return mergeAlias(change, bp);\n        };\n        const replaceWithPrintAlias = (change) => {\n            return this.hook.isPrintEvent(change) ? this.hook.updateEvent(change) : change;\n        };\n        return this.matchMedia\n            .activations\n            .map(query => new MediaChange(true, query))\n            .map(replaceWithPrintAlias)\n            .map(mergeMQAlias)\n            .sort(sortDescendingPriority);\n    }\n}\nMediaObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaObserver, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: PrintHook }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaObserver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaObserver, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaObserver, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: PrintHook }]; } });\n/**\n * Find associated breakpoint (if any)\n */\nfunction toMediaQuery(query, locator) {\n    const bp = locator.findByAlias(query) || locator.findByQuery(query);\n    return bp ? bp.mediaQuery : null;\n}\n/**\n * Split each query string into separate query strings if two queries are provided as comma\n * separated.\n */\nfunction splitQueries(queries) {\n    return queries.map((query) => query.split(','))\n        .reduce((a1, a2) => a1.concat(a2))\n        .map(query => query.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Class\n */\nclass MediaTrigger {\n    constructor(breakpoints, matchMedia, layoutConfig, _platformId, _document) {\n        this.breakpoints = breakpoints;\n        this.matchMedia = matchMedia;\n        this.layoutConfig = layoutConfig;\n        this._platformId = _platformId;\n        this._document = _document;\n        this.hasCachedRegistryMatches = false;\n        this.originalActivations = [];\n        this.originalRegistry = new Map();\n    }\n    /**\n     * Manually activate range of breakpoints\n     * @param list array of mediaQuery or alias strings\n     */\n    activate(list) {\n        list = list.map(it => it.trim()); // trim queries\n        this.saveActivations();\n        this.deactivateAll();\n        this.setActivations(list);\n        this.prepareAutoRestore();\n    }\n    /**\n     * Restore original, 'real' breakpoints and emit events\n     * to trigger stream notification\n     */\n    restore() {\n        if (this.hasCachedRegistryMatches) {\n            const extractQuery = (change) => change.mediaQuery;\n            const list = this.originalActivations.map(extractQuery);\n            try {\n                this.deactivateAll();\n                this.restoreRegistryMatches();\n                this.setActivations(list);\n            }\n            finally {\n                this.originalActivations = [];\n                if (this.resizeSubscription) {\n                    this.resizeSubscription.unsubscribe();\n                }\n            }\n        }\n    }\n    // ************************************************\n    // Internal Methods\n    // ************************************************\n    /**\n     * Whenever window resizes, immediately auto-restore original\n     * activations (if we are simulating activations)\n     */\n    prepareAutoRestore() {\n        const isBrowser = isPlatformBrowser(this._platformId) && this._document;\n        const enableAutoRestore = isBrowser && this.layoutConfig.mediaTriggerAutoRestore;\n        if (enableAutoRestore) {\n            const resize$ = fromEvent(window, 'resize').pipe(take(1));\n            this.resizeSubscription = resize$.subscribe(this.restore.bind(this));\n        }\n    }\n    /**\n     * Notify all matchMedia subscribers of de-activations\n     *\n     * Note: we must force 'matches' updates for\n     *       future matchMedia::activation lookups\n     */\n    deactivateAll() {\n        const list = this.currentActivations;\n        this.forceRegistryMatches(list, false);\n        this.simulateMediaChanges(list, false);\n    }\n    /**\n     * Cache current activations as sorted, prioritized list of MediaChanges\n     */\n    saveActivations() {\n        if (!this.hasCachedRegistryMatches) {\n            const toMediaChange = (query) => new MediaChange(true, query);\n            const mergeMQAlias = (change) => {\n                const bp = this.breakpoints.findByQuery(change.mediaQuery);\n                return mergeAlias(change, bp);\n            };\n            this.originalActivations = this.currentActivations\n                .map(toMediaChange)\n                .map(mergeMQAlias)\n                .sort(sortDescendingPriority);\n            this.cacheRegistryMatches();\n        }\n    }\n    /**\n     * Force set manual activations for specified mediaQuery list\n     */\n    setActivations(list) {\n        if (!!this.originalRegistry) {\n            this.forceRegistryMatches(list, true);\n        }\n        this.simulateMediaChanges(list);\n    }\n    /**\n     * For specified mediaQuery list manually simulate activations or deactivations\n     */\n    simulateMediaChanges(queries, matches = true) {\n        const toMediaQuery = (query) => {\n            const locator = this.breakpoints;\n            const bp = locator.findByAlias(query) || locator.findByQuery(query);\n            return bp ? bp.mediaQuery : query;\n        };\n        const emitChangeEvent = (query) => this.emitChangeEvent(matches, query);\n        queries.map(toMediaQuery).forEach(emitChangeEvent);\n    }\n    /**\n     * Replace current registry with simulated registry...\n     * Note: this is required since MediaQueryList::matches is 'readOnly'\n     */\n    forceRegistryMatches(queries, matches) {\n        const registry = new Map();\n        queries.forEach(query => {\n            registry.set(query, { matches });\n        });\n        this.matchMedia.registry = registry;\n    }\n    /**\n     * Save current MatchMedia::registry items.\n     */\n    cacheRegistryMatches() {\n        const target = this.originalRegistry;\n        target.clear();\n        this.matchMedia.registry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.hasCachedRegistryMatches = true;\n    }\n    /**\n     * Restore original, 'true' registry\n     */\n    restoreRegistryMatches() {\n        const target = this.matchMedia.registry;\n        target.clear();\n        this.originalRegistry.forEach((value, key) => {\n            target.set(key, value);\n        });\n        this.originalRegistry.clear();\n        this.hasCachedRegistryMatches = false;\n    }\n    /**\n     * Manually emit a MediaChange event via the MatchMedia to MediaMarshaller and MediaObserver\n     */\n    emitChangeEvent(matches, query) {\n        this.matchMedia.source.next(new MediaChange(matches, query));\n    }\n    get currentActivations() {\n        return this.matchMedia.activations;\n    }\n}\nMediaTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaTrigger, deps: [{ token: BreakPointRegistry }, { token: MatchMedia }, { token: LAYOUT_CONFIG }, { token: PLATFORM_ID }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nMediaTrigger.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaTrigger, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: MediaTrigger, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: BreakPointRegistry }, { type: MatchMedia }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [LAYOUT_CONFIG]\n                    }] }, { type: Object, decorators: [{\n                        type: Inject,\n                        args: [PLATFORM_ID]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n* The flex API permits 3 or 1 parts of the value:\n*    - `flex-grow flex-shrink flex-basis`, or\n*    - `flex-basis`\n*/\nfunction validateBasis(basis, grow = '1', shrink = '1') {\n    let parts = [grow, shrink, basis];\n    let j = basis.indexOf('calc');\n    if (j > 0) {\n        parts[2] = _validateCalcValue(basis.substring(j).trim());\n        let matches = basis.substr(0, j).trim().split(' ');\n        if (matches.length == 2) {\n            parts[0] = matches[0];\n            parts[1] = matches[1];\n        }\n    }\n    else if (j == 0) {\n        parts[2] = _validateCalcValue(basis.trim());\n    }\n    else {\n        let matches = basis.split(' ');\n        parts = (matches.length === 3) ? matches : [\n            grow, shrink, basis\n        ];\n    }\n    return parts;\n}\n/**\n * Calc expressions require whitespace before & after any expression operators\n * This is a simple, crude whitespace padding solution.\n *   - '3 3 calc(15em + 20px)'\n *   - calc(100% / 7 * 2)\n *   - 'calc(15em + 20px)'\n *   - 'calc(15em+20px)'\n *   - '37px'\n *   = '43%'\n */\nfunction _validateCalcValue(calc) {\n    return calc.replace(/[\\s]/g, '').replace(/[\\/\\*\\+\\-]/g, ' $& ');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BREAKPOINT, BREAKPOINTS, BREAKPOINT_PRINT, BROWSER_PROVIDER, BaseDirective2, BreakPointRegistry, CLASS_NAME, CoreModule, DEFAULT_BREAKPOINTS, DEFAULT_CONFIG, LAYOUT_CONFIG, MediaChange, MediaMarshaller, MediaObserver, MediaTrigger, ORIENTATION_BREAKPOINTS, PrintHook, SERVER_TOKEN, ScreenTypes, StyleBuilder, StyleUtils, StylesheetMap, coerceArray, mergeAlias, removeStyles, sortAscendingPriority, sortDescendingPriority, validateBasis, MatchMedia as ɵMatchMedia, MockMatchMedia as ɵMockMatchMedia, MockMatchMediaProvider as ɵMockMatchMediaProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}