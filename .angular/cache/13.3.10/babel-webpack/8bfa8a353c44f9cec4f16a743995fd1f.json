{"ast":null,"code":"import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/** Event object emitted by MatChip when selected or deselected. */\nconst _c0 = [\"*\"];\nclass MatChipSelectionChange {\n  constructor( /** Reference to the chip that emitted the event. */\n  source, /** Whether the chip that emitted the event is selected. */\n  selected, /** Whether the selection change was a result of a user interaction. */\n  isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {}\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\nMatChipAvatar.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_AVATAR,\n    useExisting: MatChipAvatar\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      },\n      providers: [{\n        provide: MAT_CHIP_AVATAR,\n        useExisting: MatChipAvatar\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {}\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\nMatChipTrailingIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_TRAILING_ICON,\n    useExisting: MatChipTrailingIcon\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      },\n      providers: [{\n        provide: MAT_CHIP_TRAILING_ICON,\n        useExisting: MatChipTrailingIcon\n      }]\n    }]\n  }], null, null);\n})();\n/** Material Design styled chip directive. Used inside the MatChipList component. */\nclass MatChip extends _MatChipMixinBase {\n  constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n    super(elementRef);\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Whether the chip has focus. */\n    this._hasFocus = false;\n    /** Whether the chip list is selectable */\n    this.chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n    this._chipListMultiple = false;\n    /** Whether the chip list as a whole is disabled. */\n    this._chipListDisabled = false;\n    this._selected = false;\n    this._selectable = true;\n    this._disabled = false;\n    this._removable = true;\n    /** Emits when the chip is focused. */\n    this._onFocus = new Subject();\n    /** Emits when the chip is blured. */\n    this._onBlur = new Subject();\n    /** Emitted when the chip is selected or deselected. */\n    this.selectionChange = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n    this.destroyed = new EventEmitter();\n    /** Emitted when a chip is to be removed. */\n    this.removed = new EventEmitter();\n    this._addHostClassName();\n    // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n    this._chipRippleTarget = _document.createElement('div');\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n    this._chipRipple.setupTriggerEvents(elementRef);\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n  }\n  /** Whether the chip is selected. */\n  get selected() {\n    return this._selected;\n  }\n  set selected(value) {\n    const coercedValue = coerceBooleanProperty(value);\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  get value() {\n    return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /** Whether the chip is disabled. */\n  get disabled() {\n    return this._chipListDisabled || this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  get removable() {\n    return this._removable;\n  }\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected() {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n  }\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement;\n    if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n    this._chipRipple._removeTriggerEvents();\n  }\n  /** Selects the chip. */\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Deselects the chip. */\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Select this chip and emit selected event */\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    this._changeDetectorRef.markForCheck();\n    return this.selected;\n  }\n  /** Allows for programmatic focusing of the chip. */\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({\n        chip: this\n      });\n    }\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /** Handles click events on the chip. */\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    }\n  }\n  /** Handle custom key presses. */\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocus = false;\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵinjectAttribute('tabindex'));\n};\nMatChip.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n  hostVars: 14,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      i0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    disabled: \"disabled\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip mat-focus-indicator',\n        '[attr.tabindex]': 'disabled ? null : tabIndex',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationsDisabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    avatar: [{\n      type: ContentChild,\n      args: [MAT_CHIP_AVATAR]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_TRAILING_ICON]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_REMOVE]\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n  constructor(_parentChip, elementRef) {\n    this._parentChip = _parentChip;\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event) {\n    const parentChip = this._parentChip;\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    }\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n    event.preventDefault();\n  }\n}\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(i0.ɵɵdirectiveInject(MatChip), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\nMatChipRemove.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_REMOVE,\n    useExisting: MatChipRemove\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      },\n      providers: [{\n        provide: MAT_CHIP_REMOVE,\n        useExisting: MatChipRemove\n      }]\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /** Whether the control is focused. */\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n    this.chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n    this.placeholder = '';\n    /** Unique id for the input. */\n    this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n    this._disabled = false;\n    this.inputElement = this._elementRef.nativeElement;\n  }\n  /** Register input for chip list */\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /** Whether the input is disabled. */\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether the input is empty. */\n  get empty() {\n    return !this.inputElement.value;\n  }\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n  ngOnDestroy() {\n    this.chipEnd.complete();\n  }\n  ngAfterContentInit() {\n    this._focusLastChipOnBackspace = this.empty;\n  }\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event) {\n    if (event) {\n      // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n      // want to do this when going backwards, because focus should go back to the first chip.\n      if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n        this._chipList._allowFocusEscape();\n      }\n      // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n      // We focus the last chip on backspace only after the user has released the backspace button,\n      // and the input is empty (see behaviour in _keyup)\n      if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n        this._chipList._keyManager.setLastItemActive();\n        event.preventDefault();\n        return;\n      } else {\n        this._focusLastChipOnBackspace = false;\n      }\n    }\n    this._emitChipEnd(event);\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keyup(event) {\n    // Allow user to move focus to chips next time he presses backspace\n    if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n      this._focusLastChipOnBackspace = true;\n      event.preventDefault();\n    }\n  }\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n  _focus() {\n    this.focused = true;\n    this._focusLastChipOnBackspace = this.empty;\n    this._chipList.stateChanges.next();\n  }\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event) {\n    if (!this.inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this.inputElement,\n        value: this.inputElement.value,\n        chipInput: this\n      });\n      event === null || event === void 0 ? void 0 : event.preventDefault();\n    }\n  }\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /** Focuses the input. */\n  focus(options) {\n    this.inputElement.focus(options);\n  }\n  /** Clears the input */\n  clear() {\n    this.inputElement.value = '';\n    this._focusLastChipOnBackspace = true;\n  }\n  /** Checks whether a keycode is one of the configured separators. */\n  _isSeparatorKey(event) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n}\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\nMatChipInput.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 5,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) {\n        return ctx._keyup($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    }\n  },\n  inputs: {\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(keyup)': '_keyup($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n        '[attr.aria-required]': '_chipList && _chipList.required || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n  constructor( /** Chip list that emitted the event. */\n  source, /** Value of the chip list when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListBase {\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n    this._lastDestroyedChipIndex = null;\n    /** Subject that emits when the component has been destroyed. */\n    this._destroyed = new Subject();\n    /** Uid of the chip list */\n    this._uid = `mat-chip-list-${nextUniqueId++}`;\n    /** Tab index for the chip list. */\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n    this._userTabIndex = null;\n    /** Function when touched */\n    this._onTouched = () => {};\n    /** Function when changed */\n    this._onChange = () => {};\n    this._multiple = false;\n    this._compareWith = (o1, o2) => o1 === o2;\n    this._disabled = false;\n    /** Orientation of the chip list. */\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  /** The array of selected chips inside chip list. */\n  get selected() {\n    var _a, _b;\n    return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n  }\n  /** The ARIA role applied to the chip list. */\n  get role() {\n    return this.empty ? null : 'listbox';\n  }\n  /** Whether the user should be allowed to select multiple chips. */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  set compareWith(fn) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get required() {\n    var _a, _b, _c, _d;\n    return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n  }\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._syncChipsState();\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  get selectable() {\n    return this._selectable;\n  }\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges() {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges() {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n      this._resetChips();\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n      this.stateChanges.next();\n    });\n  }\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n    this._dropSubscriptions();\n  }\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement) {\n    this._chipInput = inputElement;\n    // We use this attribute to match the chip list to its input in test harnesses.\n    // Set the attribute directly here to avoid \"changed after checked\" errors.\n    this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(options) {\n    if (this.disabled) {\n      return;\n    }\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n      this.stateChanges.next();\n    }\n  }\n  /** Attempt to focus an input if we have one. */\n  _focusInput(options) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event) {\n    const target = event.target;\n    if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  _selectValue(value, isUserInput = true) {\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n    return correspondingChip;\n  }\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /** Listens to user-generated selection events on each chip. */\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source);\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /** Listens to user-generated selection events on each chip. */\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /** Checks whether an event comes from inside a chip element. */\n  _originatesFromChip(event) {\n    let currentElement = event.target;\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n      currentElement = currentElement.parentElement;\n    }\n    return false;\n  }\n  /** Checks whether any of the chips is focused. */\n  _hasFocusedChip() {\n    return this.chips && this.chips.some(chip => chip._hasFocus);\n  }\n  /** Syncs the list's state with the individual chips. */\n  _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n}\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$1.Directionality, 8), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher), i0.ɵɵdirectiveInject(i2.NgControl, 10));\n};\nMatChipList.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._uid);\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      i0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    errorStateMatcher: \"errorStateMatcher\",\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'role ? required : null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    errorStateMatcher: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\nclass MatChipsModule {}\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\nMatChipsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue: {\n      separatorKeyCodes: [ENTER]\n    }\n  }],\n  imports: [[MatCommonModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue: {\n          separatorKeyCodes: [ENTER]\n        }\n      }]\n    }]\n  }], null, null);\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };","map":{"version":3,"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","i0","InjectionToken","Directive","EventEmitter","Optional","Inject","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","i3","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","MatCommonModule","ErrorStateMatcher","coerceBooleanProperty","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","i1","FocusKeyManager","SelectionModel","i2","Validators","MatFormFieldControl","i1$1","MatChipSelectionChange","constructor","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","ɵdir","provide","useExisting","type","args","selector","host","providers","MatChipTrailingIcon","MatChip","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","rippleDisabled","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","removable","ariaSelected","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","chip","_removeTriggerEvents","select","markForCheck","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","_handleKeydown","keyCode","_blur","onStable","pipe","subscribe","run","ElementRef","NgZone","Platform","ChangeDetectorRef","inputs","exportAs","decorators","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","stopPropagation","MAT_CHIPS_DEFAULT_OPTIONS","nextUniqueId$1","MatChipInput","_defaultOptions","focused","_addOnBlur","separatorKeyCodes","chipEnd","placeholder","id","inputElement","chipList","_chipList","registerInput","addOnBlur","empty","ngOnChanges","stateChanges","complete","ngAfterContentInit","_focusLastChipOnBackspace","_keydown","_allowFocusEscape","_keyManager","setLastItemActive","_emitChipEnd","_keyup","_focus","_isSeparatorKey","input","chipInput","_onInput","options","clear","Set","has","_MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","nextUniqueId","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","ariaOrientation","change","valueChange","valueAccessor","_a","_b","multiple","_selectionModel","role","_syncChipsState","compareWith","fn","_initializeSelection","writeValue","_chipInput","required","_c","_d","_required","control","hasValidator","_placeholder","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","_dropSubscriptions","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","setFirstItemActive","_focusInput","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItem","currentElement","parentElement","some","Directionality","NgForm","FormGroupDirective","NgControl","ɵcmp","template","encapsulation","None","changeDetection","OnPush","styles","errorStateMatcher","descendants","CHIP_DECLARATIONS","MatChipsModule","ɵmod","ɵinj","useValue","imports","exports","declarations"],"sources":["C:/MY_folder/Pan_App/pan/node_modules/@angular/material/fesm2015/chips.mjs"],"sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/platform';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/** Event object emitted by MatChip when selected or deselected. */\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipAvatar, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatChipAvatar.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatChipAvatar, selector: \"mat-chip-avatar, [matChipAvatar]\", host: { classAttribute: \"mat-chip-avatar\" }, providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipAvatar, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-chip-avatar, [matChipAvatar]',\n                    host: { 'class': 'mat-chip-avatar' },\n                    providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }],\n                }]\n        }] });\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipTrailingIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatChipTrailingIcon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatChipTrailingIcon, selector: \"mat-chip-trailing-icon, [matChipTrailingIcon]\", host: { classAttribute: \"mat-chip-trailing-icon\" }, providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipTrailingIcon, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                    host: { 'class': 'mat-chip-trailing-icon' },\n                    providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }],\n                }]\n        }] });\n/** Material Design styled chip directive. Used inside the MatChipList component. */\nclass MatChip extends _MatChipMixinBase {\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return (this.disabled ||\n            this.disableRipple ||\n            this._animationsDisabled ||\n            !!this.rippleConfig.disabled);\n    }\n    /** Whether the chip is selected. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) {\n        this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() {\n        return this._selectable && this.chipListSelectable;\n    }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() {\n        return this._chipListDisabled || this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() {\n        return this._removable;\n    }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected)\n            ? this.selected.toString()\n            : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected,\n        });\n    }\n}\nMatChip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChip, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.Platform }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatChip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatChip, selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, host: { attributes: { \"role\": \"option\" }, listeners: { \"click\": \"_handleClick($event)\", \"keydown\": \"_handleKeydown($event)\", \"focus\": \"focus()\", \"blur\": \"_blur()\" }, properties: { \"attr.tabindex\": \"disabled ? null : tabIndex\", \"class.mat-chip-selected\": \"selected\", \"class.mat-chip-with-avatar\": \"avatar\", \"class.mat-chip-with-trailing-icon\": \"trailingIcon || removeIcon\", \"class.mat-chip-disabled\": \"disabled\", \"class._mat-animation-noopable\": \"_animationsDisabled\", \"attr.disabled\": \"disabled || null\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-selected\": \"ariaSelected\" }, classAttribute: \"mat-chip mat-focus-indicator\" }, queries: [{ propertyName: \"avatar\", first: true, predicate: MAT_CHIP_AVATAR, descendants: true }, { propertyName: \"trailingIcon\", first: true, predicate: MAT_CHIP_TRAILING_ICON, descendants: true }, { propertyName: \"removeIcon\", first: true, predicate: MAT_CHIP_REMOVE, descendants: true }], exportAs: [\"matChip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                    inputs: ['color', 'disableRipple', 'tabIndex'],\n                    exportAs: 'matChip',\n                    host: {\n                        'class': 'mat-chip mat-focus-indicator',\n                        '[attr.tabindex]': 'disabled ? null : tabIndex',\n                        'role': 'option',\n                        '[class.mat-chip-selected]': 'selected',\n                        '[class.mat-chip-with-avatar]': 'avatar',\n                        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                        '[class.mat-chip-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_animationsDisabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-selected]': 'ariaSelected',\n                        '(click)': '_handleClick($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }];\n    }, propDecorators: { avatar: [{\n                type: ContentChild,\n                args: [MAT_CHIP_AVATAR]\n            }], trailingIcon: [{\n                type: ContentChild,\n                args: [MAT_CHIP_TRAILING_ICON]\n            }], removeIcon: [{\n                type: ContentChild,\n                args: [MAT_CHIP_REMOVE]\n            }], selected: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selectable: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], removable: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], removed: [{\n                type: Output\n            }] } });\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n        event.preventDefault();\n    }\n}\nMatChipRemove.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipRemove, deps: [{ token: MatChip }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatChipRemove.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatChipRemove, selector: \"[matChipRemove]\", host: { listeners: { \"click\": \"_handleClick($event)\" }, classAttribute: \"mat-chip-remove mat-chip-trailing-icon\" }, providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipRemove, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matChipRemove]',\n                    host: {\n                        'class': 'mat-chip-remove mat-chip-trailing-icon',\n                        '(click)': '_handleClick($event)',\n                    },\n                    providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }],\n                }]\n        }], ctorParameters: function () { return [{ type: MatChip }, { type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId$1 = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId$1++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() {\n        return this._addOnBlur;\n    }\n    set addOnBlur(value) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /** Whether the input is disabled. */\n    get disabled() {\n        return this._disabled || (this._chipList && this._chipList.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether the input is empty. */\n    get empty() {\n        return !this.inputElement.value;\n    }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event === null || event === void 0 ? void 0 : event.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipInput, deps: [{ token: i0.ElementRef }, { token: MAT_CHIPS_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Directive });\nMatChipInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatChipInput, selector: \"input[matChipInputFor]\", inputs: { chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, host: { listeners: { \"keydown\": \"_keydown($event)\", \"keyup\": \"_keyup($event)\", \"blur\": \"_blur()\", \"focus\": \"_focus()\", \"input\": \"_onInput()\" }, properties: { \"id\": \"id\", \"attr.disabled\": \"disabled || null\", \"attr.placeholder\": \"placeholder || null\", \"attr.aria-invalid\": \"_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null\", \"attr.aria-required\": \"_chipList && _chipList.required || null\" }, classAttribute: \"mat-chip-input mat-input-element\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matChipInputFor]',\n                    exportAs: 'matChipInput, matChipInputFor',\n                    host: {\n                        'class': 'mat-chip-input mat-input-element',\n                        '(keydown)': '_keydown($event)',\n                        '(keyup)': '_keyup($event)',\n                        '(blur)': '_blur()',\n                        '(focus)': '_focus()',\n                        '(input)': '_onInput()',\n                        '[id]': 'id',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.placeholder]': 'placeholder || null',\n                        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                        '[attr.aria-required]': '_chipList && _chipList.required || null',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { chipList: [{\n                type: Input,\n                args: ['matChipInputFor']\n            }], addOnBlur: [{\n                type: Input,\n                args: ['matChipInputAddOnBlur']\n            }], separatorKeyCodes: [{\n                type: Input,\n                args: ['matChipInputSeparatorKeyCodes']\n            }], chipEnd: [{\n                type: Output,\n                args: ['matChipInputTokenEnd']\n            }], placeholder: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() {\n        return this.empty ? null : 'listbox';\n    }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() {\n        return this._selectable;\n    }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => (chip.chipListSelectable = this._selectable));\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipList, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$1.Directionality, optional: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\nMatChipList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatChipList, selector: \"mat-chip-list\", inputs: { errorStateMatcher: \"errorStateMatcher\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], selectable: \"selectable\", tabIndex: \"tabIndex\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, host: { listeners: { \"focus\": \"focus()\", \"blur\": \"_blur()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.tabindex\": \"disabled ? null : _tabIndex\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-required\": \"role ? required : null\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-multiselectable\": \"multiple\", \"attr.role\": \"role\", \"class.mat-chip-list-disabled\": \"disabled\", \"class.mat-chip-list-invalid\": \"errorState\", \"class.mat-chip-list-required\": \"required\", \"attr.aria-orientation\": \"ariaOrientation\", \"id\": \"_uid\" }, classAttribute: \"mat-chip-list\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], queries: [{ propertyName: \"chips\", predicate: MatChip, descendants: true }], exportAs: [\"matChipList\"], usesInheritance: true, ngImport: i0, template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, isInline: true, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-chip-list', template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, exportAs: 'matChipList', host: {\n                        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-required]': 'role ? required : null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-multiselectable]': 'multiple',\n                        '[attr.role]': 'role',\n                        '[class.mat-chip-list-disabled]': 'disabled',\n                        '[class.mat-chip-list-invalid]': 'errorState',\n                        '[class.mat-chip-list-required]': 'required',\n                        '[attr.aria-orientation]': 'ariaOrientation',\n                        'class': 'mat-chip-list',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                        '(keydown)': '_keydown($event)',\n                        '[id]': '_uid',\n                    }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.cdk-high-contrast-active .mat-standard-chip.mat-chip-selected{outline-width:3px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden;transform:translateZ(0)}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i2.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.ErrorStateMatcher }, { type: i2.NgControl, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }];\n    }, propDecorators: { errorStateMatcher: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], ariaOrientation: [{\n                type: Input,\n                args: ['aria-orientation']\n            }], selectable: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }], chips: [{\n                type: ContentChildren,\n                args: [MatChip, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatChipsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipsModule, declarations: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon], imports: [MatCommonModule], exports: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon] });\nMatChipsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipsModule, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: {\n                separatorKeyCodes: [ENTER],\n            },\n        },\n    ], imports: [[MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatChipsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: CHIP_DECLARATIONS,\n                    declarations: CHIP_DECLARATIONS,\n                    providers: [\n                        ErrorStateMatcher,\n                        {\n                            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                            useValue: {\n                                separatorKeyCodes: [ENTER],\n                            },\n                        },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}